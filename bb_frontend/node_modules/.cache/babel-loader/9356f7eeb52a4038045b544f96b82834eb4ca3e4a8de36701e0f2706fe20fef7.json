{"ast":null,"code":"var _jsxFileName = \"/Users/aditi/Desktop/BB_Latest_2.0/BudgetBusters/bb_frontend/src/components/InputDailySpending.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { auth } from \"../firebase\";\nimport { post, put, get, del } from \"./ApiClient\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction InputDailySpending() {\n  _s();\n  const user = auth.currentUser;\n  const userEmail = user ? user.email : \"\";\n  useEffect(() => {\n    const storedPurchases = JSON.parse(localStorage.getItem(`purchases_${userEmail}`));\n    if (storedPurchases && storedPurchases.length > 0) {\n      setPurchases(storedPurchases);\n      setIsSubmitted(true);\n    }\n  }, []);\n  const [inputDailyObj, setInputDailyObj] = useState({});\n  const [inputDailyUpdated, setInputDailyUpdated] = useState(false); // to re-fetch input info whenever update happens\n\n  const [budgetGoalObj, setBudgetGoalObj] = useState({});\n  const [budgetUpdated, setBudgetUpdated] = useState(false); // to re-fetch budget info whenever update happens\n\n  /* obtaining input daily spending object from user input */\n  useEffect(() => {\n    function fetchInputDailyData() {\n      let data;\n      try {\n        // Make the GET request to retrieve the budget\n        data = get(`/getPurchase/${userEmail}`);\n      } catch (error) {\n        console.error(\"Error creating or fetching purchase(s):\", error);\n      }\n      return data;\n    }\n    fetchInputDailyData().then(response => {\n      setInputDailyObj(response.data);\n    });\n    setInputDailyUpdated(false);\n  }, [userEmail, inputDailyUpdated]);\n\n  /* obtaining budget goal object from user input */\n  useEffect(() => {\n    function fetchBudgetData() {\n      let data;\n      try {\n        // Make the GET request to retrieve the budget\n        data = get(`/getBudget/${userEmail}`);\n      } catch (error) {\n        console.error(\"Error creating or fetching budget:\", error);\n      }\n      return data;\n    }\n    fetchBudgetData().then(response => {\n      setBudgetGoalObj(response.data);\n    });\n    setBudgetUpdated(false);\n  }, [userEmail, budgetUpdated]);\n  const [showPurchaseFields, setShowPurchaseFields] = useState(false);\n  const [purchasedItem, setPurchasedItem] = useState('');\n  const [purchaseAmount, setPurchaseAmount] = useState('');\n  const [amountError, setAmountError] = useState('');\n  const [addPurchaseError, setAddPurchaseError] = useState('');\n  const [editPurchaseError, setEditPurchaseError] = useState('');\n  const [selectedCategory, setSelectedCategory] = useState('');\n  const [purchases, setPurchases] = useState([]); // State to store added purchases\n  const [noSpendingMessage, setNoSpendingMessage] = useState(\"You did not spend anything today.\");\n  const [isEditing, setIsEditing] = useState(false);\n  const [isSubmitted, setIsSubmitted] = useState(false);\n  const [editIndex, setEditIndex] = useState(null);\n  const [isAddMode, setIsAddMode] = useState(true);\n  const arePurchasesStored = (inputDailyObj === null || inputDailyObj === void 0 ? void 0 : inputDailyObj.numPurchases) > 0;\n\n  /* category data from setMonthlyGoal Page*/\n  const selectedCategories = budgetGoalObj.allCategories;\n\n  /* function handling non-numeric values in purchase amount field */\n  const handlePurchaseAmountChange = event => {\n    const inputAmount = event.target.value;\n    const numericRegex = /^[0-9]*$/;\n    if (numericRegex.test(inputAmount)) {\n      setPurchaseAmount(inputAmount);\n      setAmountError('');\n    } else {\n      setPurchaseAmount(inputAmount);\n      setAmountError('Invalid purchase amount. Please provide a numerical input.');\n    }\n  };\n\n  /* function handling purchase adding - making sure every field is entered */\n  const handleAddPurchase = () => {\n    if (purchasedItem.trim() && purchaseAmount.trim() && selectedCategory) {\n      const newPurchase = {\n        item: purchasedItem,\n        amount: purchaseAmount,\n        category: selectedCategory,\n        selected: true\n      };\n      setPurchases([...purchases, newPurchase]);\n      setPurchasedItem('');\n      setPurchaseAmount('');\n      setSelectedCategory('');\n      setAddPurchaseError('');\n      setEditIndex(null);\n      setIsEditing(false);\n    } else {\n      setAddPurchaseError('Please fill in all fields.');\n    }\n  };\n\n  /* function handling the submit button for finalizing user purchases and displaying them in reverse order */\n  const handleSubmit = async () => {\n    if (purchases.length === 0) {\n      setNoSpendingMessage(noSpendingMessage);\n    } else {\n      setNoSpendingMessage(\"\");\n      setIsSubmitted(true);\n    }\n    setShowPurchaseFields(false);\n    setPurchases(purchases);\n    setIsAddMode(false);\n    localStorage.setItem(`purchases_${userEmail}`, JSON.stringify(purchases));\n    const totalDailySpending = purchases.reduce((total, purchase) => {\n      return total + parseInt(purchase.amount);\n    }, 0);\n\n    // send json obj\n    const userPurchaseInfo = {\n      email: userEmail,\n      numPurchases: purchases.length,\n      purchases: purchases.map(purchase => ({\n        purchaseName: purchase.item,\n        purchaseAmount: purchase.amount,\n        purchaseCategory: purchase.category\n      })),\n      totalDailySpending: totalDailySpending\n    };\n    const createInputDailyResponse = await post('/createPurchase', userPurchaseInfo);\n    setInputDailyUpdated(true);\n    window.alert(\"Saved purchase(s)!\");\n  };\n\n  /* function handling purchase removal and associated default noSpendingMessage */\n  const handleRemovePurchase = async index => {\n    const updatedPurchases = purchases.filter((_, i) => i !== index);\n    setPurchases(updatedPurchases);\n    if (updatedPurchases.length === 0) {\n      setNoSpendingMessage('You did not spend anything today.');\n    }\n    const totalDailySpending = purchases.reduce((total, purchase) => {\n      return total + parseInt(purchase.amount);\n    }, 0);\n    const purchaseToRemove = {\n      email: userEmail,\n      purchase: purchases[index],\n      totalDailySpending: totalDailySpending\n    };\n    const delPurchaseResponse = await del(`/deletePurchase/${userEmail}/${index}/${totalDailySpending}`, purchaseToRemove);\n    setInputDailyUpdated(true);\n    window.alert(\"Click Submit to confirm your deleted purchase!\");\n  };\n\n  /* function to edit input spending */\n  const handleEditPurchase = index => {\n    const purchaseToEdit = purchases[index];\n    setPurchasedItem(purchaseToEdit.item);\n    setPurchaseAmount(purchaseToEdit.amount);\n    setSelectedCategory(purchaseToEdit.category);\n    setEditIndex(index);\n    setIsEditing(true);\n    setEditPurchaseError('');\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [!inputDailyObj || (inputDailyObj === null || inputDailyObj === void 0 ? void 0 : inputDailyObj.numPurchases) === 0 ? /*#__PURE__*/_jsxDEV(\"h2\", {\n      children: noSpendingMessage\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 187,\n      columnNumber: 17\n    }, this) : /*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Total Spending for Today: $\" + inputDailyObj.totalDailySpending\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 188,\n      columnNumber: 17\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"add-user-input\",\n      children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n        children: \"Input Purchase:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 192,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: 'plus-button',\n        onClick: () => {\n          setShowPurchaseFields(!showPurchaseFields);\n          setIsAddMode(true);\n          setPurchasedItem(''); // clear previous values when switching to add mode\n          setPurchaseAmount('');\n          setSelectedCategory('');\n        },\n        children: \"+\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 193,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 191,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"add-field\",\n      children: showPurchaseFields && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: 'input-purchase',\n        children: [/*#__PURE__*/_jsxDEV(\"h5\", {\n          children: \"Purchase:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 210,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          className: 'purchase-item',\n          type: \"text\",\n          value: purchasedItem,\n          onChange: e => setPurchasedItem(e.target.value),\n          placeholder: \"Enter your purchased item\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 211,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"h6\", {\n            children: \"Amount:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 219,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            className: 'amount-input',\n            type: \"text\",\n            value: purchaseAmount,\n            onChange: handlePurchaseAmountChange,\n            placeholder: \"Item Amount\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 220,\n            columnNumber: 29\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 218,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"category-container\",\n          children: [/*#__PURE__*/_jsxDEV(\"h7\", {\n            children: \"Select Category:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 229,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n            className: \"category-dropdown\",\n            value: selectedCategory,\n            onChange: e => setSelectedCategory(e.target.value),\n            children: [/*#__PURE__*/_jsxDEV(\"option\", {\n              value: \"\",\n              children: \"Select a category\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 235,\n              columnNumber: 33\n            }, this), selectedCategories === null || selectedCategories === void 0 ? void 0 : selectedCategories.map(category => /*#__PURE__*/_jsxDEV(\"option\", {\n              value: category,\n              children: category\n            }, category, false, {\n              fileName: _jsxFileName,\n              lineNumber: 237,\n              columnNumber: 37\n            }, this))]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 230,\n            columnNumber: 29\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 228,\n          columnNumber: 25\n        }, this), amountError && /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"error-message2\",\n          children: amountError\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 243,\n          columnNumber: 41\n        }, this), addPurchaseError && /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"error-message3\",\n          children: addPurchaseError\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 244,\n          columnNumber: 46\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"add-button2\",\n          onClick: handleAddPurchase,\n          disabled: amountError !== '',\n          children: isAddMode ? \"Add Purchase\" : \"Save Edit2\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 245,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 209,\n        columnNumber: 21\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 207,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: isAddMode && purchases.map((purchase, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [!arePurchasesStored && /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"purchase-info-button\",\n            children: /*#__PURE__*/_jsxDEV(\"div\", {\n              className: 'span',\n              children: ['Purchase: ' + purchase.item, /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 265,\n                columnNumber: 71\n              }, this), 'Amount: ' + purchase.amount, /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 266,\n                columnNumber: 71\n              }, this), 'Category: ' + purchase.category]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 264,\n              columnNumber: 37\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 263,\n            columnNumber: 33\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"remove-purchase-button\",\n            onClick: () => handleRemovePurchase(index),\n            children: \"X\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 270,\n            columnNumber: 33\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 262,\n          columnNumber: 29\n        }, this), isSubmitted && !isAddMode &&\n        /*#__PURE__*/\n        // render edit button only when user submits\n        _jsxDEV(\"button\", {\n          className: \"remove-purchase-button\",\n          onClick: () => handleEditPurchase(index),\n          children: \"Edit\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 274,\n          columnNumber: 33\n        }, this), isEditing && editIndex === index && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"edit-purchase\",\n          children: [\" \", /*#__PURE__*/_jsxDEV(\"h5\", {\n            children: \"Purchase:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 279,\n            columnNumber: 37\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            className: 'purchase-item',\n            type: \"text\",\n            value: purchasedItem,\n            onChange: e => setPurchasedItem(e.target.value),\n            placeholder: \"Enter your purchased item\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 280,\n            columnNumber: 37\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            children: [/*#__PURE__*/_jsxDEV(\"h6\", {\n              children: \"Amount:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 288,\n              columnNumber: 41\n            }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n              className: 'amount-input',\n              type: \"text\",\n              value: purchaseAmount,\n              onChange: handlePurchaseAmountChange,\n              placeholder: \"Item Amount\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 289,\n              columnNumber: 41\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 287,\n            columnNumber: 37\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"category-container\",\n            children: [/*#__PURE__*/_jsxDEV(\"h7\", {\n              children: \"Select Category:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 298,\n              columnNumber: 41\n            }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n              className: \"category-dropdown\",\n              value: selectedCategory,\n              onChange: e => setSelectedCategory(e.target.value),\n              children: [/*#__PURE__*/_jsxDEV(\"option\", {\n                value: \"\",\n                children: \"Select a category\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 304,\n                columnNumber: 45\n              }, this), selectedCategories === null || selectedCategories === void 0 ? void 0 : selectedCategories.map(category => /*#__PURE__*/_jsxDEV(\"option\", {\n                value: category,\n                children: category\n              }, category, false, {\n                fileName: _jsxFileName,\n                lineNumber: 306,\n                columnNumber: 49\n              }, this))]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 299,\n              columnNumber: 41\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 297,\n            columnNumber: 37\n          }, this), amountError && /*#__PURE__*/_jsxDEV(\"p\", {\n            className: \"error-message7\",\n            children: amountError\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 312,\n            columnNumber: 53\n          }, this), editPurchaseError && /*#__PURE__*/_jsxDEV(\"p\", {\n            className: \"error-message8\",\n            children: editPurchaseError\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 313,\n            columnNumber: 59\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"add-button2\",\n            disabled: amountError !== '',\n            children: \"Save Edit\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 314,\n            columnNumber: 37\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 278,\n          columnNumber: 33\n        }, this)]\n      }, index, true, {\n        fileName: _jsxFileName,\n        lineNumber: 260,\n        columnNumber: 25\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 257,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"submit-button\",\n      onClick: handleSubmit,\n      children: \"Submit\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 327,\n      columnNumber: 13\n    }, this), (purchases.length > 0 && !isAddMode || arePurchasesStored) && /*#__PURE__*/_jsxDEV(DisplayDailySpending, {\n      purchases: purchases,\n      purchasedItem: purchasedItem,\n      setPurchasedItem: setPurchasedItem,\n      purchaseAmount: purchaseAmount,\n      handlePurchaseAmountChange: handlePurchaseAmountChange,\n      selectedCategory: selectedCategory,\n      setSelectedCategory: setSelectedCategory,\n      selectedCategories: selectedCategories,\n      amountError: amountError,\n      editPurchaseError: editPurchaseError,\n      handleRemovePurchase: handleRemovePurchase,\n      isSubmitted: isSubmitted,\n      setPurchaseAmount: setPurchaseAmount,\n      isAddMode: false,\n      setPurchases: setPurchases,\n      showPurchaseFields: showPurchaseFields,\n      userEmail: userEmail,\n      setInputDailyUpdated: setInputDailyUpdated,\n      inputDailyObj: inputDailyObj\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 333,\n      columnNumber: 17\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 183,\n    columnNumber: 9\n  }, this);\n}\n_s(InputDailySpending, \"n8E9yJyXxZXXQS68C6kKEq6AVGA=\");\n_c = InputDailySpending;\nfunction DisplayDailySpending({\n  purchases,\n  purchasedItem,\n  setPurchasedItem,\n  purchaseAmount,\n  handlePurchaseAmountChange,\n  setPurchaseAmount,\n  selectedCategory,\n  setSelectedCategory,\n  selectedCategories,\n  amountError,\n  editPurchaseError,\n  handleRemovePurchase,\n  isSubmitted,\n  isAddMode,\n  setPurchases,\n  showPurchaseFields,\n  userEmail,\n  setInputDailyUpdated,\n  inputDailyObj\n}) {\n  _s2();\n  var _ref, _inputDailyObj$purcha;\n  const [isEditing, setIsEditing] = useState(false);\n  const [editIndex, setEditIndex] = useState(null);\n  const handleEditPurchase = index => {\n    setEditIndex(index);\n    setIsEditing(true);\n    const selectedPurchase = purchases[index];\n    setPurchasedItem(selectedPurchase.item);\n    setPurchaseAmount(selectedPurchase.amount);\n    setSelectedCategory(selectedPurchase.category);\n  };\n  const handleSaveUpdate = async index => {\n    if (index !== null) {\n      if (purchasedItem.trim() && purchaseAmount.trim() && selectedCategory) {\n        setIsEditing(false);\n        setEditIndex(null);\n        const updatedPurchases = [...purchases];\n        updatedPurchases[index] = {\n          item: purchasedItem,\n          amount: purchaseAmount,\n          category: selectedCategory\n        };\n        setPurchases(updatedPurchases);\n        const totalDailySpending = updatedPurchases.reduce((total, purchase) => {\n          return total + parseInt(purchase.amount);\n        }, 0);\n        const updatedPurchaseInfo = {\n          email: userEmail,\n          numPurchases: purchases.length,\n          purchases: updatedPurchases.map(purchase => ({\n            purchaseName: purchase.item,\n            purchaseAmount: purchase.amount,\n            purchaseCategory: purchase.category\n          })),\n          totalDailySpending: totalDailySpending\n        };\n        const updatedInputDailyResponse = await put('/updatePurchase', updatedPurchaseInfo);\n        setInputDailyUpdated(true);\n      } else {\n        console.log(\"Please fill in all fields.\");\n      }\n    } else {\n      console.log(\"Index doesn't exist.\");\n    }\n    console.log(\"Handle save is rendering.\");\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [isSubmitted && !showPurchaseFields && ((_ref = inputDailyObj ? inputDailyObj.purchases : purchases) === null || _ref === void 0 ? void 0 : _ref.length) > 0 && /*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Today's Purchases\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 420,\n      columnNumber: 17\n    }, this), !isAddMode && inputDailyObj && ((_inputDailyObj$purcha = inputDailyObj.purchases) === null || _inputDailyObj$purcha === void 0 ? void 0 : _inputDailyObj$purcha.map((purchase, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"purchase-info-button\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: 'span',\n          children: ['Purchase: ' + purchase.purchaseName, /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 427,\n            columnNumber: 67\n          }, this), 'Amount: ' + purchase.purchaseAmount, /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 428,\n            columnNumber: 67\n          }, this), 'Category: ' + purchase.purchaseCategory]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 426,\n          columnNumber: 25\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 425,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"remove-purchase-button\",\n        onClick: () => handleRemovePurchase(index),\n        children: \"X\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 432,\n        columnNumber: 21\n      }, this), isSubmitted && !isAddMode &&\n      /*#__PURE__*/\n      // render edit button only when user submits\n      _jsxDEV(\"button\", {\n        className: \"remove-purchase-button\",\n        onClick: () => handleEditPurchase(index),\n        children: \"Edit\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 434,\n        columnNumber: 25\n      }, this), isEditing && editIndex === index && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"edit-purchase\",\n        children: [\" \", /*#__PURE__*/_jsxDEV(\"h5\", {\n          children: \"Purchase:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 438,\n          columnNumber: 29\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          className: 'purchase-item',\n          type: \"text\",\n          value: purchasedItem,\n          onChange: e => setPurchasedItem(e.target.value),\n          placeholder: \"Enter your purchased item\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 439,\n          columnNumber: 29\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"h6\", {\n            children: \"Amount:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 447,\n            columnNumber: 33\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            className: 'amount-input',\n            type: \"text\",\n            value: purchaseAmount,\n            onChange: handlePurchaseAmountChange,\n            placeholder: \"Item Amount\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 448,\n            columnNumber: 33\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 446,\n          columnNumber: 29\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"category-container\",\n          children: [/*#__PURE__*/_jsxDEV(\"h7\", {\n            children: \"Select Category:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 457,\n            columnNumber: 33\n          }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n            className: \"category-dropdown\",\n            value: selectedCategory,\n            onChange: e => setSelectedCategory(e.target.value),\n            children: [/*#__PURE__*/_jsxDEV(\"option\", {\n              value: \"\",\n              children: \"Select a category\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 463,\n              columnNumber: 37\n            }, this), selectedCategories === null || selectedCategories === void 0 ? void 0 : selectedCategories.map(category => /*#__PURE__*/_jsxDEV(\"option\", {\n              value: category,\n              children: category\n            }, category, false, {\n              fileName: _jsxFileName,\n              lineNumber: 465,\n              columnNumber: 41\n            }, this))]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 458,\n            columnNumber: 33\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 456,\n          columnNumber: 29\n        }, this), amountError && /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"error-message7\",\n          children: amountError\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 471,\n          columnNumber: 45\n        }, this), editPurchaseError && /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"error-message8\",\n          children: editPurchaseError\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 472,\n          columnNumber: 51\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"add-button2\",\n          onClick: () => handleSaveUpdate(index),\n          disabled: amountError !== '',\n          children: \"Save Edit\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 473,\n          columnNumber: 29\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 437,\n        columnNumber: 25\n      }, this)]\n    }, index, true, {\n      fileName: _jsxFileName,\n      lineNumber: 424,\n      columnNumber: 17\n    }, this)))]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 417,\n    columnNumber: 9\n  }, this);\n}\n_s2(DisplayDailySpending, \"u/v3athSSMXGgKaIdnao7wm3sBM=\");\n_c2 = DisplayDailySpending;\nexport default InputDailySpending;\n\n// S3_PREV_US2 code (with time resetting implemented)\n// import React, { useState, useEffect } from 'react';\n// import { auth } from \"../firebase\";\n//\n// function InputDailySpending() {\n//     const user = auth.currentUser;\n//     const userEmail = user ? user.email : \"\";\n//     const [isSubmitted, setIsSubmitted] = useState(false);\n//     useEffect(() => {\n//         const storedPurchases = JSON.parse(localStorage.getItem(`purchases_${userEmail}`));\n//         if (storedPurchases && storedPurchases.length > 0) {\n//             setPurchases(storedPurchases);\n//             // setIsSubmitted(true);\n//             // Other necessary state updates\n//         }\n//\n//         // REAL IMPLEMENTATION OF MIDNIGHT RESET\n//         // set up an interval to check and reset purchases at midnight\n//     //     const midnightReset = () => {\n//     //         const now = new Date();\n//     //         const midnight = new Date(now);\n//     //         midnight.setHours(24, 0, 0, 0); // Set to midnight of the current day\n//     //\n//     //         // calculate the time until midnight\n//     //         const timeUntilMidnight = midnight - now;\n//     //\n//     //         // reset purchases at midnight\n//     //         setTimeout(() => {\n//     //             setPurchases([]);\n//     //             setNoSpendingMessage(\"You did not spend anything today.\");\n//     //             //set inputDailyObj to nothing as well?\n//     //         }, timeUntilMidnight);\n//     //     };\n//     //\n//     //     // check and reset purchases at midnight every day\n//     //     const intervalId = setInterval(midnightReset, 1000 * 60 * 60);\n//     //\n//     //     // cleanup interval when the component is unmounted\n//     //     return () => clearInterval(intervalId);\n//     // }, [userEmail]); // dependency array ensures the effect runs when the userEmail changes\n//\n//\n//         //TESTING IMPLEMENTATION OF RESETTING 30 SEC AFTER SUBMISSION\n//         // set up a timeout to reset purchases after 2 minutes\n//         const resetTimeout = setTimeout(() => {\n//             setPurchases([]);\n//             setNoSpendingMessage(\"You did not spend anything today.\");\n//         }, 0.5 * 60 * 1000); // 30 sec\n//\n//         // Cleanup timeout when the component is unmounted or purchases are submitted\n//         return () => clearTimeout(resetTimeout);\n//     }, [userEmail, isSubmitted]);\n//\n//\n//     const [showPurchaseFields, setShowPurchaseFields] = useState(false);\n//     const [purchasedItem, setPurchasedItem] = useState('');\n//     const [purchaseAmount, setPurchaseAmount] = useState('');\n//     const [amountError, setAmountError] = useState('');\n//     const [addPurchaseError, setAddPurchaseError] = useState('');\n//     const [editPurchaseError, setEditPurchaseError] = useState('');\n//     const [selectedCategory, setSelectedCategory] = useState('');\n//     const [purchases, setPurchases] = useState([]); // State to store added purchases\n//     const [noSpendingMessage, setNoSpendingMessage] = useState(\"You did not spend anything today.\");\n//     const [isEditing, setIsEditing] = useState(false);\n//     const [editIndex, setEditIndex] = useState(null);\n//     const [isAddMode, setIsAddMode] = useState(true);\n//     const arePurchasesStored = purchases.length > 0;\n//\n//     /* dummy category data */\n//     const selectedCategories = Object.values({category1: \"Rent\", category2: \"Groceries\", category3: \"Gym\"});\n//\n//     /* function handling non-numeric values in purchase amount field */\n//     const handlePurchaseAmountChange = (event) => {\n//         const inputAmount = event.target.value;\n//         const numericRegex = /^[0-9]*$/;\n//\n//         if (numericRegex.test(inputAmount)) {\n//             setPurchaseAmount(inputAmount);\n//             setAmountError('');\n//         } else {\n//             setPurchaseAmount(inputAmount);\n//             setAmountError('Invalid purchase amount. Please provide a numerical input.');\n//         }\n//     };\n//\n//     /* function handling purchase adding - making sure every field is entered */\n//     const handleAddPurchase = () => {\n//         if (purchasedItem.trim() && purchaseAmount.trim() && selectedCategory) {\n//             const newPurchase = {\n//                 item: purchasedItem,\n//                 amount: purchaseAmount,\n//                 category: selectedCategory,\n//                 selected: true,\n//             };\n//             setPurchases([...purchases, newPurchase]);\n//             setPurchasedItem('');\n//             setPurchaseAmount('');\n//             setSelectedCategory('');\n//\n//             setAddPurchaseError('');\n//             setEditIndex(null);\n//             setIsEditing(false);\n//         } else {\n//             setAddPurchaseError('Please fill in all fields.');\n//         }\n//     };\n//\n//     /* function handling the submit button for finalizing user purchases and displaying them in reverse order */\n//     const handleSubmit = () => {\n//         if (purchases.length === 0) {\n//             setNoSpendingMessage(noSpendingMessage);\n//         } else {\n//             setNoSpendingMessage(\"\");\n//             setIsSubmitted(true);\n//         }\n//         setShowPurchaseFields(false);\n//         setPurchases(purchases.slice().reverse());\n//         setIsAddMode(false);\n//\n//         localStorage.setItem(`purchases_${userEmail}`, JSON.stringify(purchases));\n//\n//         // send json obj\n//         window.alert(\"Added purchase(s)!\");\n//     };\n//\n//     /* function handling purchase removal and associated default noSpendingMessage */\n//     const handleRemovePurchase = (index) => {\n//         const updatedPurchases = [...purchases];\n//         updatedPurchases.splice(index, 1);\n//         setPurchases(updatedPurchases);\n//         if (updatedPurchases.length === 0) {\n//             setNoSpendingMessage('You did not spend anything today.');\n//         }\n//     };\n//\n//     /* function to edit input spending */\n//     const handleEditPurchase = (index) => {\n//         const purchaseToEdit = purchases[index];\n//         setPurchasedItem(purchaseToEdit.item);\n//         setPurchaseAmount(purchaseToEdit.amount);\n//         setSelectedCategory(purchaseToEdit.category);\n//         setEditIndex(index);\n//         setIsEditing(true);\n//         setEditPurchaseError('');\n//     };\n//\n//     const handleSaveEdit = () => {\n//         if (editIndex !== null) {\n//             if (purchasedItem.trim() && purchaseAmount.trim() && selectedCategory) {\n//                 const updatedPurchases = [...purchases];\n//                 updatedPurchases[editIndex] = {\n//                     item: purchasedItem,\n//                     amount: purchaseAmount,\n//                     category: selectedCategory,\n//                 };\n//                 setPurchases(updatedPurchases);\n//                 setEditIndex(null);\n//                 setIsEditing(false);\n//                 setEditPurchaseError('');\n//             } else {\n//                 setEditPurchaseError('Please fill in all fields.');\n//             }\n//         } else {\n//             setEditPurchaseError('No purchase selected for editing.');\n//         }\n//     };\n//\n//     return (\n//         <div>\n//             {purchases.length === 0 && (\n//                 <h2>{noSpendingMessage}</h2>\n//             )}\n//             <div className=\"add-user-input\">\n//                 <h4>Input Purchase:</h4>\n//                 <button\n//                     className={'plus-button'}\n//                     onClick={() => {\n//                         setShowPurchaseFields(!showPurchaseFields);\n//                         setIsAddMode(true);\n//                         setPurchasedItem(''); // Clear previous values when switching to Add mode\n//                         setPurchaseAmount('');\n//                         setSelectedCategory('');\n//                     }}\n//                 >\n//                     +\n//                 </button>\n//             </div>\n//\n//             <div className=\"add-field\">\n//                 {showPurchaseFields && (\n//                     <div className={'input-purchase'}>\n//                         <h5>Purchase:</h5>\n//                         <input\n//                             className={'purchase-item'}\n//                             type=\"text\"\n//                             value={purchasedItem}\n//                             onChange={(e) => setPurchasedItem(e.target.value)}\n//                             placeholder=\"Enter your purchased item\"\n//                         />\n//                         <div>\n//                             <h6>Amount:</h6>\n//                             <input\n//                                 className={'amount-input'}\n//                                 type=\"text\"\n//                                 value={purchaseAmount}\n//                                 onChange={handlePurchaseAmountChange}\n//                                 placeholder=\"Item Amount\"\n//                             />\n//                         </div>\n//                         <div className=\"category-container\">\n//                             <h7>Select Category:</h7>\n//                             <select\n//                                 className='category-dropdown'\n//                                 value={selectedCategory}\n//                                 onChange={(e) => setSelectedCategory(e.target.value)}\n//                             >\n//                                 <option value=\"\">Select a category</option>\n//                                 {selectedCategories.map((category) => (\n//                                     <option key={category} value={category}>\n//                                         {category}\n//                                     </option>\n//                                 ))}\n//                             </select>\n//                         </div>\n//                         {amountError && <p className=\"error-noSpendingMessage2\">{amountError}</p>}\n//                         {addPurchaseError && <p className=\"error-noSpendingMessage3\">{addPurchaseError}</p>}\n//                         <button\n//                             className=\"add-button2\"\n//                             onClick={isAddMode ? handleAddPurchase : handleSaveEdit}\n//                             disabled={amountError !== ''}\n//                         >\n//                             {isAddMode ? \"Add Purchase\" : \"Save Edit\"}\n//                         </button>\n//                     </div>\n//                 )}\n//             </div>\n//\n//             <div>\n//                 {isAddMode ? (\n//                     purchases.map((purchase, index) => (\n//                         <div key={index}>\n//                             {(!arePurchasesStored) && (\n//                             <div>\n//                                 <button className=\"purchase-info-button\">\n//                                     <div className={'span'}>\n//                                         {'Purchase: ' + purchase.item}<br />\n//                                         {'Amount: ' + purchase.amount}<br />\n//                                         {'Category: ' + purchase.category}\n//                                     </div>\n//                                 </button>\n//                                 <button className=\"remove-purchase-button\" onClick={() => handleRemovePurchase(index)}>X</button>\n//                             </div>\n//                             )}\n//                             {(isSubmitted && !isAddMode) ? ( // render edit button only when user submits\n//                                 <button className=\"remove-purchase-button\"\n//                                         onClick={() => handleEditPurchase(index)}>Edit</button>\n//                             ) : null}\n//                             {isEditing && editIndex === index && (\n//                                 <div className=\"edit-purchase\"> {/* prepopulate input fields when editing */}\n//                                     <h5>Purchase:</h5>\n//                                     <input\n//                                         className={'purchase-item'}\n//                                         type=\"text\"\n//                                         value={purchasedItem}\n//                                         onChange={(e) => setPurchasedItem(e.target.value)}\n//                                         placeholder=\"Enter your purchased item\"\n//                                     />\n//                                     <div>\n//                                         <h6>Amount:</h6>\n//                                         <input\n//                                             className={'amount-input'}\n//                                             type=\"text\"\n//                                             value={purchaseAmount}\n//                                             onChange={handlePurchaseAmountChange}\n//                                             placeholder=\"Item Amount\"\n//                                         />\n//                                     </div>\n//                                     <div className=\"category-container\">\n//                                         <h7>Select Category:</h7>\n//                                         <select\n//                                             className='category-dropdown'\n//                                             value={selectedCategory}\n//                                             onChange={(e) => setSelectedCategory(e.target.value)}\n//                                         >\n//                                             <option value=\"\">Select a category</option>\n//                                             {selectedCategories.map((category) => (\n//                                                 <option key={category} value={category}>\n//                                                     {category}\n//                                                 </option>\n//                                             ))}\n//                                         </select>\n//                                     </div>\n//                                     {amountError && <p className=\"error-noSpendingMessage7\">{amountError}</p>}\n//                                     {editPurchaseError && <p className=\"error-noSpendingMessage8\">{editPurchaseError}</p>}\n//                                     <button\n//                                         className=\"add-button2\"\n//                                         onClick={handleSaveEdit}\n//                                         disabled={amountError !== ''}\n//                                     >\n//                                         Save Edit\n//                                     </button>\n//                                 </div>\n//                             )}\n//                         </div>\n//                     ))\n//                 ) : null}\n//             </div>\n//\n//             <button className=\"submit-button\" onClick={handleSubmit}>\n//                 Submit\n//             </button>\n//\n//             {((purchases.length > 0 && !isAddMode) || (arePurchasesStored)) &&\n//                 <DisplayDailySpending\n//                     purchases={purchases}\n//                     purchasedItem={purchasedItem}\n//                     setPurchasedItem={setPurchasedItem}\n//                     purchaseAmount={purchaseAmount}\n//                     handlePurchaseAmountChange={handlePurchaseAmountChange}\n//                     selectedCategory={selectedCategory}\n//                     setSelectedCategory={setSelectedCategory}\n//                     selectedCategories={selectedCategories}\n//                     amountError={amountError}\n//                     editPurchaseError={editPurchaseError}\n//                     handleRemovePurchase={handleRemovePurchase}\n//                     isSubmitted={isSubmitted}\n//                     setPurchaseAmount={setPurchaseAmount}\n//                     isAddMode={false}\n//                     arePurchasesStored={arePurchasesStored}\n//                     setPurchases={setPurchases}\n//                     showPurchaseFields={showPurchaseFields}\n//                     // handleSaveEdit={handleSaveEdit}\n//                 />\n//             }\n//         </div>\n//     );\n//     // }\n// }\n//\n// function DisplayDailySpending({ purchases, purchasedItem, setPurchasedItem, purchaseAmount,\n//                                   handlePurchaseAmountChange, setPurchaseAmount, selectedCategory, setSelectedCategory, selectedCategories,\n//                               amountError, editPurchaseError, handleRemovePurchase, isSubmitted, mockInputDailyInfo, isAddMode, arePurchasesStored, setPurchases, showPurchaseFields }) {\n//     const [isEditing, setIsEditing] = useState(false);\n//     const [editIndex, setEditIndex] = useState(null);\n//\n//     const handleEditPurchase = (index) => {\n//         setEditIndex(index);\n//         setIsEditing(true);\n//\n//         const selectedPurchase = purchases[index];\n//         setPurchasedItem(selectedPurchase.item);\n//         setPurchaseAmount(selectedPurchase.amount);\n//         setSelectedCategory(selectedPurchase.category);\n//     };\n//\n//     const handleSaveEdit = (index) => {\n//         if (index !== null) {\n//             if (purchasedItem.trim() && purchaseAmount.trim() && selectedCategory) {\n//                 setIsEditing(false);\n//                 setEditIndex(null);\n//\n//                 const updatedPurchases = [...purchases];\n//                 updatedPurchases[editIndex] = {\n//                     item: purchasedItem,\n//                     amount: purchaseAmount,\n//                     category: selectedCategory,\n//                 };\n//                 setPurchases(updatedPurchases);\n//             } else {\n//                 console.log(\"please fill in all fields\")\n//             }\n//         } else {\n//             console.log(\"index doesn't exist\")\n//         }\n//         console.log(\"handle save is rendering\")\n//     };\n//\n//     return (\n//         <div>\n//             {(!showPurchaseFields && isSubmitted && purchases.length > 0) && (\n//                 <h2>Today's Purchases</h2>\n//             )}\n//             {purchases.map((purchase, index) => (\n//                 <div key={index}>\n//                     <button className=\"purchase-info-button\">\n//                         <div className={'span'}>\n//                             {'Purchase: ' + purchase.item}<br />\n//                             {'Amount: ' + purchase.amount}<br />\n//                             {'Category: ' + purchase.category}\n//                         </div>\n//                     </button>\n//                     <button className=\"remove-purchase-button\" onClick={() => handleRemovePurchase(index)}>X</button>\n//                     {(isSubmitted && !isAddMode) ? ( // render edit button only when user submits\n//                         <button className=\"remove-purchase-button\" onClick={() => handleEditPurchase(index)}>Edit</button>\n//                     ) : null}\n//                     {isEditing && editIndex === index && (\n//                         <div className=\"edit-purchase\"> {/* prepopulate input fields when editing */}\n//                             <h5>Purchase:</h5>\n//                             <input\n//                                 className={'purchase-item'}\n//                                 type=\"text\"\n//                                 value={purchasedItem}\n//                                 onChange={(e) => setPurchasedItem(e.target.value)}\n//                                 placeholder=\"Enter your purchased item\"\n//                             />\n//                             <div>\n//                                 <h6>Amount:</h6>\n//                                 <input\n//                                     className={'amount-input'}\n//                                     type=\"text\"\n//                                     value={purchaseAmount}\n//                                     onChange={handlePurchaseAmountChange}\n//                                     placeholder=\"Item Amount\"\n//                                 />\n//                             </div>\n//                             <div className=\"category-container\">\n//                                 <h7>Select Category:</h7>\n//                                 <select\n//                                     className='category-dropdown'\n//                                     value={selectedCategory}\n//                                     onChange={(e) => setSelectedCategory(e.target.value)}\n//                                 >\n//                                     <option value=\"\">Select a category</option>\n//                                     {selectedCategories.map((category) => (\n//                                         <option key={category} value={category}>\n//                                             {category}\n//                                         </option>\n//                                     ))}\n//                                 </select>\n//                             </div>\n//                             {amountError && <p className=\"error-noSpendingMessage7\">{amountError}</p>}\n//                             {editPurchaseError && <p className=\"error-noSpendingMessage8\">{editPurchaseError}</p>}\n//                             <button\n//                                 className=\"add-button2\"\n//                                 onClick={() => handleSaveEdit(index)}\n//                                 disabled={amountError !== ''}\n//                             >\n//                                 Save Edit\n//                             </button>\n//                         </div>\n//                     )}\n//                 </div>\n//             ))}\n//         </div>\n//     )\n// }\n//\n// export default InputDailySpending;\nvar _c, _c2;\n$RefreshReg$(_c, \"InputDailySpending\");\n$RefreshReg$(_c2, \"DisplayDailySpending\");","map":{"version":3,"names":["React","useState","useEffect","auth","post","put","get","del","jsxDEV","_jsxDEV","InputDailySpending","_s","user","currentUser","userEmail","email","storedPurchases","JSON","parse","localStorage","getItem","length","setPurchases","setIsSubmitted","inputDailyObj","setInputDailyObj","inputDailyUpdated","setInputDailyUpdated","budgetGoalObj","setBudgetGoalObj","budgetUpdated","setBudgetUpdated","fetchInputDailyData","data","error","console","then","response","fetchBudgetData","showPurchaseFields","setShowPurchaseFields","purchasedItem","setPurchasedItem","purchaseAmount","setPurchaseAmount","amountError","setAmountError","addPurchaseError","setAddPurchaseError","editPurchaseError","setEditPurchaseError","selectedCategory","setSelectedCategory","purchases","noSpendingMessage","setNoSpendingMessage","isEditing","setIsEditing","isSubmitted","editIndex","setEditIndex","isAddMode","setIsAddMode","arePurchasesStored","numPurchases","selectedCategories","allCategories","handlePurchaseAmountChange","event","inputAmount","target","value","numericRegex","test","handleAddPurchase","trim","newPurchase","item","amount","category","selected","handleSubmit","setItem","stringify","totalDailySpending","reduce","total","purchase","parseInt","userPurchaseInfo","map","purchaseName","purchaseCategory","createInputDailyResponse","window","alert","handleRemovePurchase","index","updatedPurchases","filter","_","i","purchaseToRemove","delPurchaseResponse","handleEditPurchase","purchaseToEdit","children","fileName","_jsxFileName","lineNumber","columnNumber","className","onClick","type","onChange","e","placeholder","disabled","DisplayDailySpending","_c","_s2","_ref","_inputDailyObj$purcha","selectedPurchase","handleSaveUpdate","updatedPurchaseInfo","updatedInputDailyResponse","log","_c2","$RefreshReg$"],"sources":["/Users/aditi/Desktop/BB_Latest_2.0/BudgetBusters/bb_frontend/src/components/InputDailySpending.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { auth } from \"../firebase\";\nimport {post, put, get, del} from \"./ApiClient\";\n\nfunction InputDailySpending() {\n    const user = auth.currentUser;\n    const userEmail = user ? user.email : \"\";\n    useEffect(() => {\n        const storedPurchases = JSON.parse(localStorage.getItem(`purchases_${userEmail}`));\n        if (storedPurchases && storedPurchases.length > 0) {\n            setPurchases(storedPurchases);\n            setIsSubmitted(true);\n        }\n    }, []);\n\n    const [inputDailyObj, setInputDailyObj] = useState({});\n    const [inputDailyUpdated, setInputDailyUpdated] = useState(false); // to re-fetch input info whenever update happens\n\n    const [budgetGoalObj, setBudgetGoalObj] = useState({});\n    const [budgetUpdated, setBudgetUpdated] = useState(false); // to re-fetch budget info whenever update happens\n\n    /* obtaining input daily spending object from user input */\n    useEffect(() => {\n        function fetchInputDailyData() {\n            let data;\n            try {\n                // Make the GET request to retrieve the budget\n                data = get(`/getPurchase/${userEmail}`)\n            } catch (error) {\n                console.error(\"Error creating or fetching purchase(s):\", error);\n            }\n            return data;\n        }\n        fetchInputDailyData().then((response) => {\n            setInputDailyObj(response.data);\n        });\n        setInputDailyUpdated(false);\n    }, [userEmail, inputDailyUpdated]);\n\n    /* obtaining budget goal object from user input */\n    useEffect(() => {\n        function fetchBudgetData() {\n            let data;\n            try {\n                // Make the GET request to retrieve the budget\n                data = get(`/getBudget/${userEmail}`)\n            } catch (error) {\n                console.error(\"Error creating or fetching budget:\", error);\n            }\n            return data;\n        }\n\n        fetchBudgetData().then((response) => {\n            setBudgetGoalObj(response.data);\n        });\n        setBudgetUpdated(false)\n\n    }, [userEmail, budgetUpdated]);\n\n    const [showPurchaseFields, setShowPurchaseFields] = useState(false);\n    const [purchasedItem, setPurchasedItem] = useState('');\n    const [purchaseAmount, setPurchaseAmount] = useState('');\n    const [amountError, setAmountError] = useState('');\n    const [addPurchaseError, setAddPurchaseError] = useState('');\n    const [editPurchaseError, setEditPurchaseError] = useState('');\n    const [selectedCategory, setSelectedCategory] = useState('');\n    const [purchases, setPurchases] = useState([]); // State to store added purchases\n    const [noSpendingMessage, setNoSpendingMessage] = useState(\"You did not spend anything today.\");\n    const [isEditing, setIsEditing] = useState(false);\n    const [isSubmitted, setIsSubmitted] = useState(false);\n    const [editIndex, setEditIndex] = useState(null);\n    const [isAddMode, setIsAddMode] = useState(true);\n    const arePurchasesStored = inputDailyObj?.numPurchases > 0;\n\n    /* category data from setMonthlyGoal Page*/\n    const selectedCategories = budgetGoalObj.allCategories;\n\n    /* function handling non-numeric values in purchase amount field */\n    const handlePurchaseAmountChange = (event) => {\n        const inputAmount = event.target.value;\n        const numericRegex = /^[0-9]*$/;\n\n        if (numericRegex.test(inputAmount)) {\n            setPurchaseAmount(inputAmount);\n            setAmountError('');\n        } else {\n            setPurchaseAmount(inputAmount);\n            setAmountError('Invalid purchase amount. Please provide a numerical input.');\n        }\n    };\n\n    /* function handling purchase adding - making sure every field is entered */\n    const handleAddPurchase = () => {\n        if (purchasedItem.trim() && purchaseAmount.trim() && selectedCategory) {\n            const newPurchase = {\n                item: purchasedItem,\n                amount: purchaseAmount,\n                category: selectedCategory,\n                selected: true,\n            };\n            setPurchases([...purchases, newPurchase]);\n            setPurchasedItem('');\n            setPurchaseAmount('');\n            setSelectedCategory('');\n\n            setAddPurchaseError('');\n            setEditIndex(null);\n            setIsEditing(false);\n        } else {\n            setAddPurchaseError('Please fill in all fields.');\n        }\n    };\n\n    /* function handling the submit button for finalizing user purchases and displaying them in reverse order */\n    const handleSubmit = async () => {\n        if (purchases.length === 0) {\n            setNoSpendingMessage(noSpendingMessage);\n        } else {\n            setNoSpendingMessage(\"\");\n            setIsSubmitted(true);\n        }\n        setShowPurchaseFields(false);\n        setPurchases(purchases);\n        setIsAddMode(false);\n\n        localStorage.setItem(`purchases_${userEmail}`, JSON.stringify(purchases));\n        const totalDailySpending = purchases.reduce((total, purchase) => {\n            return total + parseInt(purchase.amount);\n        }, 0);\n\n        // send json obj\n        const userPurchaseInfo = {\n            email: userEmail,\n            numPurchases: purchases.length,\n            purchases: purchases.map((purchase) => ({\n                purchaseName: purchase.item,\n                purchaseAmount: purchase.amount,\n                purchaseCategory: purchase.category,\n            })),\n            totalDailySpending: totalDailySpending\n        }\n\n        const createInputDailyResponse = await post('/createPurchase', userPurchaseInfo);\n        setInputDailyUpdated(true);\n        window.alert(\"Saved purchase(s)!\");\n    };\n\n    /* function handling purchase removal and associated default noSpendingMessage */\n    const handleRemovePurchase = async (index) => {\n        const updatedPurchases = purchases.filter((_, i) => i !== index);\n        setPurchases(updatedPurchases);\n        if (updatedPurchases.length === 0) {\n            setNoSpendingMessage('You did not spend anything today.');\n        }\n\n        const totalDailySpending = purchases.reduce((total, purchase) => {\n            return total + parseInt(purchase.amount);\n        }, 0);\n\n        const purchaseToRemove = {\n            email: userEmail,\n            purchase: purchases[index],\n            totalDailySpending: totalDailySpending\n        }\n\n        const delPurchaseResponse = await del(`/deletePurchase/${userEmail}/${index}/${totalDailySpending}`, purchaseToRemove);\n        setInputDailyUpdated(true);\n        window.alert(\"Click Submit to confirm your deleted purchase!\");\n    };\n\n    /* function to edit input spending */\n    const handleEditPurchase = (index) => {\n        const purchaseToEdit = purchases[index];\n        setPurchasedItem(purchaseToEdit.item);\n        setPurchaseAmount(purchaseToEdit.amount);\n        setSelectedCategory(purchaseToEdit.category);\n        setEditIndex(index);\n        setIsEditing(true);\n        setEditPurchaseError('');\n    };\n\n    return (\n        <div>\n            {/* if inputDailyObj doesn't exist OR contains no purchases, display no spending message.\n                else, display total spending amount */}\n            {((!inputDailyObj) || (inputDailyObj?.numPurchases === 0)) ? (\n                <h2>{noSpendingMessage}</h2>\n            ) : <h2>{\"Total Spending for Today: $\" + inputDailyObj.totalDailySpending}</h2>}\n\n            {/* displays empty purchase fields when plus button is clicked (removes fields when clicked again) */}\n            <div className=\"add-user-input\">\n                <h4>Input Purchase:</h4>\n                <button\n                    className={'plus-button'}\n                    onClick={() => {\n                        setShowPurchaseFields(!showPurchaseFields);\n                        setIsAddMode(true);\n                        setPurchasedItem(''); // clear previous values when switching to add mode\n                        setPurchaseAmount('');\n                        setSelectedCategory('');\n                    }}>\n                    +\n                </button>\n            </div>\n\n            {/* displays all empty purchase fields, handles respective input errors, and accounts for both add purchase/save edit cases */}\n            <div className=\"add-field\">\n                {showPurchaseFields && (\n                    <div className={'input-purchase'}>\n                        <h5>Purchase:</h5>\n                        <input\n                            className={'purchase-item'}\n                            type=\"text\"\n                            value={purchasedItem}\n                            onChange={(e) => setPurchasedItem(e.target.value)}\n                            placeholder=\"Enter your purchased item\"\n                        />\n                        <div>\n                            <h6>Amount:</h6>\n                            <input\n                                className={'amount-input'}\n                                type=\"text\"\n                                value={purchaseAmount}\n                                onChange={handlePurchaseAmountChange}\n                                placeholder=\"Item Amount\"\n                            />\n                        </div>\n                        <div className=\"category-container\">\n                            <h7>Select Category:</h7>\n                            <select\n                                className='category-dropdown'\n                                value={selectedCategory}\n                                onChange={(e) => setSelectedCategory(e.target.value)}\n                            >\n                                <option value=\"\">Select a category</option>\n                                {selectedCategories?.map((category) => (\n                                    <option key={category} value={category}>\n                                        {category}\n                                    </option>\n                                ))}\n                            </select>\n                        </div>\n                        {amountError && <p className=\"error-message2\">{amountError}</p>}\n                        {addPurchaseError && <p className=\"error-message3\">{addPurchaseError}</p>}\n                        <button\n                            className=\"add-button2\"\n                            onClick={handleAddPurchase}\n                            disabled={amountError !== ''}\n                        >\n                            {isAddMode ? \"Add Purchase\" : \"Save Edit2\"}\n                        </button>\n                    </div>\n                )}\n            </div>\n\n            {/* displays purchase button when user adds each purchase, allowing them to see their inputs before they submit*/}\n            <div>\n                {isAddMode && (\n                    purchases.map((purchase, index) => (\n                        <div key={index}>\n                            {!arePurchasesStored && (\n                            <div>\n                                <button className=\"purchase-info-button\">\n                                    <div className={'span'}>\n                                        {'Purchase: ' + purchase.item}<br />\n                                        {'Amount: ' + purchase.amount}<br />\n                                        {'Category: ' + purchase.category}\n                                    </div>\n                                </button>\n                                <button className=\"remove-purchase-button\" onClick={() => handleRemovePurchase(index)}>X</button>\n                            </div>\n                            )}\n                            {(isSubmitted && !isAddMode) && ( // render edit button only when user submits\n                                <button className=\"remove-purchase-button\"\n                                        onClick={() => handleEditPurchase(index)}>Edit</button>\n                            )}\n                            {isEditing && editIndex === index && (\n                                <div className=\"edit-purchase\"> {/* prepopulate input fields when editing */}\n                                    <h5>Purchase:</h5>\n                                    <input\n                                        className={'purchase-item'}\n                                        type=\"text\"\n                                        value={purchasedItem}\n                                        onChange={(e) => setPurchasedItem(e.target.value)}\n                                        placeholder=\"Enter your purchased item\"\n                                    />\n                                    <div>\n                                        <h6>Amount:</h6>\n                                        <input\n                                            className={'amount-input'}\n                                            type=\"text\"\n                                            value={purchaseAmount}\n                                            onChange={handlePurchaseAmountChange}\n                                            placeholder=\"Item Amount\"\n                                        />\n                                    </div>\n                                    <div className=\"category-container\">\n                                        <h7>Select Category:</h7>\n                                        <select\n                                            className='category-dropdown'\n                                            value={selectedCategory}\n                                            onChange={(e) => setSelectedCategory(e.target.value)}\n                                        >\n                                            <option value=\"\">Select a category</option>\n                                            {selectedCategories?.map((category) => (\n                                                <option key={category} value={category}>\n                                                    {category}\n                                                </option>\n                                            ))}\n                                        </select>\n                                    </div>\n                                    {amountError && <p className=\"error-message7\">{amountError}</p>}\n                                    {editPurchaseError && <p className=\"error-message8\">{editPurchaseError}</p>}\n                                    <button\n                                        className=\"add-button2\"\n                                        disabled={amountError !== ''}\n                                    >\n                                        Save Edit\n                                    </button>\n                                </div>\n                            )}\n                        </div>\n                    ))\n                )}\n            </div>\n\n            <button className=\"submit-button\" onClick={handleSubmit}>\n                Submit\n            </button>\n\n            {/* NOTE: new arePurchasesStored is the boolean for if the OBJ exists */}\n            {((purchases.length > 0 && !isAddMode) || (arePurchasesStored)) &&\n                <DisplayDailySpending\n                    purchases={purchases}\n                    purchasedItem={purchasedItem}\n                    setPurchasedItem={setPurchasedItem}\n                    purchaseAmount={purchaseAmount}\n                    handlePurchaseAmountChange={handlePurchaseAmountChange}\n                    selectedCategory={selectedCategory}\n                    setSelectedCategory={setSelectedCategory}\n                    selectedCategories={selectedCategories}\n                    amountError={amountError}\n                    editPurchaseError={editPurchaseError}\n                    handleRemovePurchase={handleRemovePurchase}\n                    isSubmitted={isSubmitted}\n                    setPurchaseAmount={setPurchaseAmount}\n                    isAddMode={false}\n                    setPurchases={setPurchases}\n                    showPurchaseFields={showPurchaseFields}\n                    userEmail={userEmail}\n                    setInputDailyUpdated={setInputDailyUpdated}\n                    inputDailyObj={inputDailyObj}\n                />\n            }\n        </div>\n    );\n}\n\nfunction DisplayDailySpending({ purchases, purchasedItem, setPurchasedItem, purchaseAmount,\n                                  handlePurchaseAmountChange, setPurchaseAmount, selectedCategory, setSelectedCategory,\n                                  selectedCategories, amountError, editPurchaseError, handleRemovePurchase, isSubmitted,\n                                  isAddMode, setPurchases, showPurchaseFields, userEmail, setInputDailyUpdated, inputDailyObj}) {\n    const [isEditing, setIsEditing] = useState(false);\n    const [editIndex, setEditIndex] = useState(null);\n\n    const handleEditPurchase = (index) => {\n        setEditIndex(index);\n        setIsEditing(true);\n\n        const selectedPurchase = purchases[index];\n        setPurchasedItem(selectedPurchase.item);\n        setPurchaseAmount(selectedPurchase.amount);\n        setSelectedCategory(selectedPurchase.category);\n    };\n\n    const handleSaveUpdate = async (index) => {\n        if (index !== null) {\n            if (purchasedItem.trim() && purchaseAmount.trim() && selectedCategory) {\n                setIsEditing(false);\n                setEditIndex(null);\n\n                const updatedPurchases = [...purchases];\n                updatedPurchases[index] = {\n                    item: purchasedItem,\n                    amount: purchaseAmount,\n                    category: selectedCategory,\n                };\n                setPurchases(updatedPurchases);\n\n                const totalDailySpending = updatedPurchases.reduce((total, purchase) => {\n                    return total + parseInt(purchase.amount);\n                }, 0);\n\n                const updatedPurchaseInfo = {\n                    email: userEmail,\n                    numPurchases: purchases.length,\n                    purchases: updatedPurchases.map((purchase) => ({\n                        purchaseName: purchase.item,\n                        purchaseAmount: purchase.amount,\n                        purchaseCategory: purchase.category,\n                    })),\n                    totalDailySpending: totalDailySpending\n                }\n                const updatedInputDailyResponse = await put('/updatePurchase', updatedPurchaseInfo);\n                setInputDailyUpdated(true);\n\n            } else {\n                console.log(\"Please fill in all fields.\")\n            }\n        } else {\n            console.log(\"Index doesn't exist.\")\n        }\n        console.log(\"Handle save is rendering.\")\n    };\n\n    return (\n        <div>\n            {/* when user has submitted their purchases and are not adding a new purchase, message displays */}\n            {(isSubmitted && !showPurchaseFields && (inputDailyObj ? inputDailyObj.purchases : purchases)?.length > 0) && (\n                <h2>Today's Purchases</h2>\n            )}\n            {/* when inputDailyObj exists and user is not in add mode, display all purchases from the obj */}\n            {!isAddMode && inputDailyObj && inputDailyObj.purchases?.map((purchase, index) => (\n                <div key={index}>\n                    <button className=\"purchase-info-button\">\n                        <div className={'span'}>\n                            {'Purchase: ' + purchase.purchaseName}<br />\n                            {'Amount: ' + purchase.purchaseAmount}<br />\n                            {'Category: ' + purchase.purchaseCategory}\n                        </div>\n                    </button>\n                    <button className=\"remove-purchase-button\" onClick={() => handleRemovePurchase(index)}>X</button>\n                    {(isSubmitted && !isAddMode) && ( // render edit button only when user submits\n                        <button className=\"remove-purchase-button\" onClick={() => handleEditPurchase(index)}>Edit</button>\n                    )}\n                    {isEditing && editIndex === index && (\n                        <div className=\"edit-purchase\"> {/* prepopulate input fields when editing */}\n                            <h5>Purchase:</h5>\n                            <input\n                                className={'purchase-item'}\n                                type=\"text\"\n                                value={purchasedItem}\n                                onChange={(e) => setPurchasedItem(e.target.value)}\n                                placeholder=\"Enter your purchased item\"\n                            />\n                            <div>\n                                <h6>Amount:</h6>\n                                <input\n                                    className={'amount-input'}\n                                    type=\"text\"\n                                    value={purchaseAmount}\n                                    onChange={handlePurchaseAmountChange}\n                                    placeholder=\"Item Amount\"\n                                />\n                            </div>\n                            <div className=\"category-container\">\n                                <h7>Select Category:</h7>\n                                <select\n                                    className='category-dropdown'\n                                    value={selectedCategory}\n                                    onChange={(e) => setSelectedCategory(e.target.value)}\n                                >\n                                    <option value=\"\">Select a category</option>\n                                    {selectedCategories?.map((category) => (\n                                        <option key={category} value={category}>\n                                            {category}\n                                        </option>\n                                    ))}\n                                </select>\n                            </div>\n                            {amountError && <p className=\"error-message7\">{amountError}</p>}\n                            {editPurchaseError && <p className=\"error-message8\">{editPurchaseError}</p>}\n                            <button\n                                className=\"add-button2\"\n                                onClick={() => handleSaveUpdate(index)}\n                                disabled={amountError !== ''}\n                            >\n                                Save Edit\n                            </button>\n                        </div>\n                    )}\n                </div>\n            ))}\n        </div>\n    )\n}\n\nexport default InputDailySpending;\n\n\n// S3_PREV_US2 code (with time resetting implemented)\n// import React, { useState, useEffect } from 'react';\n// import { auth } from \"../firebase\";\n//\n// function InputDailySpending() {\n//     const user = auth.currentUser;\n//     const userEmail = user ? user.email : \"\";\n//     const [isSubmitted, setIsSubmitted] = useState(false);\n//     useEffect(() => {\n//         const storedPurchases = JSON.parse(localStorage.getItem(`purchases_${userEmail}`));\n//         if (storedPurchases && storedPurchases.length > 0) {\n//             setPurchases(storedPurchases);\n//             // setIsSubmitted(true);\n//             // Other necessary state updates\n//         }\n//\n//         // REAL IMPLEMENTATION OF MIDNIGHT RESET\n//         // set up an interval to check and reset purchases at midnight\n//     //     const midnightReset = () => {\n//     //         const now = new Date();\n//     //         const midnight = new Date(now);\n//     //         midnight.setHours(24, 0, 0, 0); // Set to midnight of the current day\n//     //\n//     //         // calculate the time until midnight\n//     //         const timeUntilMidnight = midnight - now;\n//     //\n//     //         // reset purchases at midnight\n//     //         setTimeout(() => {\n//     //             setPurchases([]);\n//     //             setNoSpendingMessage(\"You did not spend anything today.\");\n//     //             //set inputDailyObj to nothing as well?\n//     //         }, timeUntilMidnight);\n//     //     };\n//     //\n//     //     // check and reset purchases at midnight every day\n//     //     const intervalId = setInterval(midnightReset, 1000 * 60 * 60);\n//     //\n//     //     // cleanup interval when the component is unmounted\n//     //     return () => clearInterval(intervalId);\n//     // }, [userEmail]); // dependency array ensures the effect runs when the userEmail changes\n//\n//\n//         //TESTING IMPLEMENTATION OF RESETTING 30 SEC AFTER SUBMISSION\n//         // set up a timeout to reset purchases after 2 minutes\n//         const resetTimeout = setTimeout(() => {\n//             setPurchases([]);\n//             setNoSpendingMessage(\"You did not spend anything today.\");\n//         }, 0.5 * 60 * 1000); // 30 sec\n//\n//         // Cleanup timeout when the component is unmounted or purchases are submitted\n//         return () => clearTimeout(resetTimeout);\n//     }, [userEmail, isSubmitted]);\n//\n//\n//     const [showPurchaseFields, setShowPurchaseFields] = useState(false);\n//     const [purchasedItem, setPurchasedItem] = useState('');\n//     const [purchaseAmount, setPurchaseAmount] = useState('');\n//     const [amountError, setAmountError] = useState('');\n//     const [addPurchaseError, setAddPurchaseError] = useState('');\n//     const [editPurchaseError, setEditPurchaseError] = useState('');\n//     const [selectedCategory, setSelectedCategory] = useState('');\n//     const [purchases, setPurchases] = useState([]); // State to store added purchases\n//     const [noSpendingMessage, setNoSpendingMessage] = useState(\"You did not spend anything today.\");\n//     const [isEditing, setIsEditing] = useState(false);\n//     const [editIndex, setEditIndex] = useState(null);\n//     const [isAddMode, setIsAddMode] = useState(true);\n//     const arePurchasesStored = purchases.length > 0;\n//\n//     /* dummy category data */\n//     const selectedCategories = Object.values({category1: \"Rent\", category2: \"Groceries\", category3: \"Gym\"});\n//\n//     /* function handling non-numeric values in purchase amount field */\n//     const handlePurchaseAmountChange = (event) => {\n//         const inputAmount = event.target.value;\n//         const numericRegex = /^[0-9]*$/;\n//\n//         if (numericRegex.test(inputAmount)) {\n//             setPurchaseAmount(inputAmount);\n//             setAmountError('');\n//         } else {\n//             setPurchaseAmount(inputAmount);\n//             setAmountError('Invalid purchase amount. Please provide a numerical input.');\n//         }\n//     };\n//\n//     /* function handling purchase adding - making sure every field is entered */\n//     const handleAddPurchase = () => {\n//         if (purchasedItem.trim() && purchaseAmount.trim() && selectedCategory) {\n//             const newPurchase = {\n//                 item: purchasedItem,\n//                 amount: purchaseAmount,\n//                 category: selectedCategory,\n//                 selected: true,\n//             };\n//             setPurchases([...purchases, newPurchase]);\n//             setPurchasedItem('');\n//             setPurchaseAmount('');\n//             setSelectedCategory('');\n//\n//             setAddPurchaseError('');\n//             setEditIndex(null);\n//             setIsEditing(false);\n//         } else {\n//             setAddPurchaseError('Please fill in all fields.');\n//         }\n//     };\n//\n//     /* function handling the submit button for finalizing user purchases and displaying them in reverse order */\n//     const handleSubmit = () => {\n//         if (purchases.length === 0) {\n//             setNoSpendingMessage(noSpendingMessage);\n//         } else {\n//             setNoSpendingMessage(\"\");\n//             setIsSubmitted(true);\n//         }\n//         setShowPurchaseFields(false);\n//         setPurchases(purchases.slice().reverse());\n//         setIsAddMode(false);\n//\n//         localStorage.setItem(`purchases_${userEmail}`, JSON.stringify(purchases));\n//\n//         // send json obj\n//         window.alert(\"Added purchase(s)!\");\n//     };\n//\n//     /* function handling purchase removal and associated default noSpendingMessage */\n//     const handleRemovePurchase = (index) => {\n//         const updatedPurchases = [...purchases];\n//         updatedPurchases.splice(index, 1);\n//         setPurchases(updatedPurchases);\n//         if (updatedPurchases.length === 0) {\n//             setNoSpendingMessage('You did not spend anything today.');\n//         }\n//     };\n//\n//     /* function to edit input spending */\n//     const handleEditPurchase = (index) => {\n//         const purchaseToEdit = purchases[index];\n//         setPurchasedItem(purchaseToEdit.item);\n//         setPurchaseAmount(purchaseToEdit.amount);\n//         setSelectedCategory(purchaseToEdit.category);\n//         setEditIndex(index);\n//         setIsEditing(true);\n//         setEditPurchaseError('');\n//     };\n//\n//     const handleSaveEdit = () => {\n//         if (editIndex !== null) {\n//             if (purchasedItem.trim() && purchaseAmount.trim() && selectedCategory) {\n//                 const updatedPurchases = [...purchases];\n//                 updatedPurchases[editIndex] = {\n//                     item: purchasedItem,\n//                     amount: purchaseAmount,\n//                     category: selectedCategory,\n//                 };\n//                 setPurchases(updatedPurchases);\n//                 setEditIndex(null);\n//                 setIsEditing(false);\n//                 setEditPurchaseError('');\n//             } else {\n//                 setEditPurchaseError('Please fill in all fields.');\n//             }\n//         } else {\n//             setEditPurchaseError('No purchase selected for editing.');\n//         }\n//     };\n//\n//     return (\n//         <div>\n//             {purchases.length === 0 && (\n//                 <h2>{noSpendingMessage}</h2>\n//             )}\n//             <div className=\"add-user-input\">\n//                 <h4>Input Purchase:</h4>\n//                 <button\n//                     className={'plus-button'}\n//                     onClick={() => {\n//                         setShowPurchaseFields(!showPurchaseFields);\n//                         setIsAddMode(true);\n//                         setPurchasedItem(''); // Clear previous values when switching to Add mode\n//                         setPurchaseAmount('');\n//                         setSelectedCategory('');\n//                     }}\n//                 >\n//                     +\n//                 </button>\n//             </div>\n//\n//             <div className=\"add-field\">\n//                 {showPurchaseFields && (\n//                     <div className={'input-purchase'}>\n//                         <h5>Purchase:</h5>\n//                         <input\n//                             className={'purchase-item'}\n//                             type=\"text\"\n//                             value={purchasedItem}\n//                             onChange={(e) => setPurchasedItem(e.target.value)}\n//                             placeholder=\"Enter your purchased item\"\n//                         />\n//                         <div>\n//                             <h6>Amount:</h6>\n//                             <input\n//                                 className={'amount-input'}\n//                                 type=\"text\"\n//                                 value={purchaseAmount}\n//                                 onChange={handlePurchaseAmountChange}\n//                                 placeholder=\"Item Amount\"\n//                             />\n//                         </div>\n//                         <div className=\"category-container\">\n//                             <h7>Select Category:</h7>\n//                             <select\n//                                 className='category-dropdown'\n//                                 value={selectedCategory}\n//                                 onChange={(e) => setSelectedCategory(e.target.value)}\n//                             >\n//                                 <option value=\"\">Select a category</option>\n//                                 {selectedCategories.map((category) => (\n//                                     <option key={category} value={category}>\n//                                         {category}\n//                                     </option>\n//                                 ))}\n//                             </select>\n//                         </div>\n//                         {amountError && <p className=\"error-noSpendingMessage2\">{amountError}</p>}\n//                         {addPurchaseError && <p className=\"error-noSpendingMessage3\">{addPurchaseError}</p>}\n//                         <button\n//                             className=\"add-button2\"\n//                             onClick={isAddMode ? handleAddPurchase : handleSaveEdit}\n//                             disabled={amountError !== ''}\n//                         >\n//                             {isAddMode ? \"Add Purchase\" : \"Save Edit\"}\n//                         </button>\n//                     </div>\n//                 )}\n//             </div>\n//\n//             <div>\n//                 {isAddMode ? (\n//                     purchases.map((purchase, index) => (\n//                         <div key={index}>\n//                             {(!arePurchasesStored) && (\n//                             <div>\n//                                 <button className=\"purchase-info-button\">\n//                                     <div className={'span'}>\n//                                         {'Purchase: ' + purchase.item}<br />\n//                                         {'Amount: ' + purchase.amount}<br />\n//                                         {'Category: ' + purchase.category}\n//                                     </div>\n//                                 </button>\n//                                 <button className=\"remove-purchase-button\" onClick={() => handleRemovePurchase(index)}>X</button>\n//                             </div>\n//                             )}\n//                             {(isSubmitted && !isAddMode) ? ( // render edit button only when user submits\n//                                 <button className=\"remove-purchase-button\"\n//                                         onClick={() => handleEditPurchase(index)}>Edit</button>\n//                             ) : null}\n//                             {isEditing && editIndex === index && (\n//                                 <div className=\"edit-purchase\"> {/* prepopulate input fields when editing */}\n//                                     <h5>Purchase:</h5>\n//                                     <input\n//                                         className={'purchase-item'}\n//                                         type=\"text\"\n//                                         value={purchasedItem}\n//                                         onChange={(e) => setPurchasedItem(e.target.value)}\n//                                         placeholder=\"Enter your purchased item\"\n//                                     />\n//                                     <div>\n//                                         <h6>Amount:</h6>\n//                                         <input\n//                                             className={'amount-input'}\n//                                             type=\"text\"\n//                                             value={purchaseAmount}\n//                                             onChange={handlePurchaseAmountChange}\n//                                             placeholder=\"Item Amount\"\n//                                         />\n//                                     </div>\n//                                     <div className=\"category-container\">\n//                                         <h7>Select Category:</h7>\n//                                         <select\n//                                             className='category-dropdown'\n//                                             value={selectedCategory}\n//                                             onChange={(e) => setSelectedCategory(e.target.value)}\n//                                         >\n//                                             <option value=\"\">Select a category</option>\n//                                             {selectedCategories.map((category) => (\n//                                                 <option key={category} value={category}>\n//                                                     {category}\n//                                                 </option>\n//                                             ))}\n//                                         </select>\n//                                     </div>\n//                                     {amountError && <p className=\"error-noSpendingMessage7\">{amountError}</p>}\n//                                     {editPurchaseError && <p className=\"error-noSpendingMessage8\">{editPurchaseError}</p>}\n//                                     <button\n//                                         className=\"add-button2\"\n//                                         onClick={handleSaveEdit}\n//                                         disabled={amountError !== ''}\n//                                     >\n//                                         Save Edit\n//                                     </button>\n//                                 </div>\n//                             )}\n//                         </div>\n//                     ))\n//                 ) : null}\n//             </div>\n//\n//             <button className=\"submit-button\" onClick={handleSubmit}>\n//                 Submit\n//             </button>\n//\n//             {((purchases.length > 0 && !isAddMode) || (arePurchasesStored)) &&\n//                 <DisplayDailySpending\n//                     purchases={purchases}\n//                     purchasedItem={purchasedItem}\n//                     setPurchasedItem={setPurchasedItem}\n//                     purchaseAmount={purchaseAmount}\n//                     handlePurchaseAmountChange={handlePurchaseAmountChange}\n//                     selectedCategory={selectedCategory}\n//                     setSelectedCategory={setSelectedCategory}\n//                     selectedCategories={selectedCategories}\n//                     amountError={amountError}\n//                     editPurchaseError={editPurchaseError}\n//                     handleRemovePurchase={handleRemovePurchase}\n//                     isSubmitted={isSubmitted}\n//                     setPurchaseAmount={setPurchaseAmount}\n//                     isAddMode={false}\n//                     arePurchasesStored={arePurchasesStored}\n//                     setPurchases={setPurchases}\n//                     showPurchaseFields={showPurchaseFields}\n//                     // handleSaveEdit={handleSaveEdit}\n//                 />\n//             }\n//         </div>\n//     );\n//     // }\n// }\n//\n// function DisplayDailySpending({ purchases, purchasedItem, setPurchasedItem, purchaseAmount,\n//                                   handlePurchaseAmountChange, setPurchaseAmount, selectedCategory, setSelectedCategory, selectedCategories,\n//                               amountError, editPurchaseError, handleRemovePurchase, isSubmitted, mockInputDailyInfo, isAddMode, arePurchasesStored, setPurchases, showPurchaseFields }) {\n//     const [isEditing, setIsEditing] = useState(false);\n//     const [editIndex, setEditIndex] = useState(null);\n//\n//     const handleEditPurchase = (index) => {\n//         setEditIndex(index);\n//         setIsEditing(true);\n//\n//         const selectedPurchase = purchases[index];\n//         setPurchasedItem(selectedPurchase.item);\n//         setPurchaseAmount(selectedPurchase.amount);\n//         setSelectedCategory(selectedPurchase.category);\n//     };\n//\n//     const handleSaveEdit = (index) => {\n//         if (index !== null) {\n//             if (purchasedItem.trim() && purchaseAmount.trim() && selectedCategory) {\n//                 setIsEditing(false);\n//                 setEditIndex(null);\n//\n//                 const updatedPurchases = [...purchases];\n//                 updatedPurchases[editIndex] = {\n//                     item: purchasedItem,\n//                     amount: purchaseAmount,\n//                     category: selectedCategory,\n//                 };\n//                 setPurchases(updatedPurchases);\n//             } else {\n//                 console.log(\"please fill in all fields\")\n//             }\n//         } else {\n//             console.log(\"index doesn't exist\")\n//         }\n//         console.log(\"handle save is rendering\")\n//     };\n//\n//     return (\n//         <div>\n//             {(!showPurchaseFields && isSubmitted && purchases.length > 0) && (\n//                 <h2>Today's Purchases</h2>\n//             )}\n//             {purchases.map((purchase, index) => (\n//                 <div key={index}>\n//                     <button className=\"purchase-info-button\">\n//                         <div className={'span'}>\n//                             {'Purchase: ' + purchase.item}<br />\n//                             {'Amount: ' + purchase.amount}<br />\n//                             {'Category: ' + purchase.category}\n//                         </div>\n//                     </button>\n//                     <button className=\"remove-purchase-button\" onClick={() => handleRemovePurchase(index)}>X</button>\n//                     {(isSubmitted && !isAddMode) ? ( // render edit button only when user submits\n//                         <button className=\"remove-purchase-button\" onClick={() => handleEditPurchase(index)}>Edit</button>\n//                     ) : null}\n//                     {isEditing && editIndex === index && (\n//                         <div className=\"edit-purchase\"> {/* prepopulate input fields when editing */}\n//                             <h5>Purchase:</h5>\n//                             <input\n//                                 className={'purchase-item'}\n//                                 type=\"text\"\n//                                 value={purchasedItem}\n//                                 onChange={(e) => setPurchasedItem(e.target.value)}\n//                                 placeholder=\"Enter your purchased item\"\n//                             />\n//                             <div>\n//                                 <h6>Amount:</h6>\n//                                 <input\n//                                     className={'amount-input'}\n//                                     type=\"text\"\n//                                     value={purchaseAmount}\n//                                     onChange={handlePurchaseAmountChange}\n//                                     placeholder=\"Item Amount\"\n//                                 />\n//                             </div>\n//                             <div className=\"category-container\">\n//                                 <h7>Select Category:</h7>\n//                                 <select\n//                                     className='category-dropdown'\n//                                     value={selectedCategory}\n//                                     onChange={(e) => setSelectedCategory(e.target.value)}\n//                                 >\n//                                     <option value=\"\">Select a category</option>\n//                                     {selectedCategories.map((category) => (\n//                                         <option key={category} value={category}>\n//                                             {category}\n//                                         </option>\n//                                     ))}\n//                                 </select>\n//                             </div>\n//                             {amountError && <p className=\"error-noSpendingMessage7\">{amountError}</p>}\n//                             {editPurchaseError && <p className=\"error-noSpendingMessage8\">{editPurchaseError}</p>}\n//                             <button\n//                                 className=\"add-button2\"\n//                                 onClick={() => handleSaveEdit(index)}\n//                                 disabled={amountError !== ''}\n//                             >\n//                                 Save Edit\n//                             </button>\n//                         </div>\n//                     )}\n//                 </div>\n//             ))}\n//         </div>\n//     )\n// }\n//\n// export default InputDailySpending;"],"mappings":"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},"metadata":{},"sourceType":"module","externalDependencies":[]}