{"ast":null,"code":"// Import the functions you need from the SDKs you need\nimport { initializeApp } from \"firebase/app\";\nimport { getAuth, GoogleAuthProvider, signInWithPopup, sendPasswordResetEmail, deleteUser } from \"firebase/auth\";\nimport 'firebase/auth';\nimport { useNavigate } from \"react-router-dom\";\n\n// TODO: Add SDKs for Firebase products that you want to use\n// https://firebase.google.com/docs/web/setup#available-libraries\n\n// Your web app's Firebase configuration\nconst firebaseConfig = {\n  apiKey: \"AIzaSyAtV57Dv8_Sv3gFIxiQm9iK-uvtcZO-S8Y\",\n  authDomain: \"budget-busters-db.firebaseapp.com\",\n  projectId: \"budge t-busters-db\",\n  storageBucket: \"budget-busters-db.appspot.com\",\n  messagingSenderId: \"619297388407\",\n  appId: \"1:619297388407:web:0a6e6a61e8f31bd09bd372\"\n};\n\n// Initialize Firebase\nconst app = initializeApp(firebaseConfig);\nexport const auth = getAuth(app);\nconst provider = new GoogleAuthProvider();\nexport const signInWithGoogle = () => {\n  return new Promise((resolve, reject) => {\n    signInWithPopup(auth, provider).then(result => {\n      console.log(result);\n      const user = result.user;\n      const userData = {\n        name: user.displayName,\n        email: user.email,\n        phone: user.phoneNumber,\n        profilePic: user.photoURL\n      };\n      localStorage.setItem(\"googleUserData\", JSON.stringify(userData));\n      resolve();\n    }).catch(error => {\n      console.log(error);\n      reject(error);\n    });\n  });\n};\nexport const resetPassword = email => {\n  // return app.auth().sendPasswordResetEmail(email)\n  return sendPasswordResetEmail(auth, email).then(() => {\n    // Password reset email sent successfully\n    console.log(\"Password reset email sent successfully.\");\n  }).catch(error => {\n    // Handle any errors that occurred during the password reset process\n    console.error(\"Error sending password reset email: \", error);\n  });\n};\n\n/* delete account */\nexport const deleteAccount = () => {\n  const auth = getAuth(app);\n  return deleteUser(auth.currentUser).then(() => {\n    console.log(\"User account deleted successfully\");\n  }).catch(error => {\n    console.error(\"Error deleting user account: \", error);\n  });\n};\n\n/* clear user data from browser localStorage when user signs out */\nexport const clearGoogleUserData = () => {\n  localStorage.removeItem(\"googleUserData\");\n};","map":{"version":3,"names":["initializeApp","getAuth","GoogleAuthProvider","signInWithPopup","sendPasswordResetEmail","deleteUser","useNavigate","firebaseConfig","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","app","auth","provider","signInWithGoogle","Promise","resolve","reject","then","result","console","log","user","userData","name","displayName","email","phone","phoneNumber","profilePic","photoURL","localStorage","setItem","JSON","stringify","catch","error","resetPassword","deleteAccount","currentUser","clearGoogleUserData","removeItem"],"sources":["/Users/aditi/Desktop/BB_Latest_2.0/BudgetBusters/bb_frontend/src/firebase.js"],"sourcesContent":["// Import the functions you need from the SDKs you need\nimport { initializeApp } from \"firebase/app\";\nimport { getAuth, GoogleAuthProvider, signInWithPopup, sendPasswordResetEmail, deleteUser } from \"firebase/auth\";\nimport 'firebase/auth';\nimport { useNavigate } from \"react-router-dom\";\n\n\n\n// TODO: Add SDKs for Firebase products that you want to use\n// https://firebase.google.com/docs/web/setup#available-libraries\n\n// Your web app's Firebase configuration\nconst firebaseConfig = {\n    apiKey: \"AIzaSyAtV57Dv8_Sv3gFIxiQm9iK-uvtcZO-S8Y\",\n    authDomain: \"budget-busters-db.firebaseapp.com\",\n    projectId: \"budge t-busters-db\",\n    storageBucket: \"budget-busters-db.appspot.com\",\n    messagingSenderId: \"619297388407\",\n    appId: \"1:619297388407:web:0a6e6a61e8f31bd09bd372\"\n};\n\n\n\n// Initialize Firebase\nconst app = initializeApp(firebaseConfig);\nexport const auth = getAuth(app);\n\nconst provider = new GoogleAuthProvider()\n\nexport const signInWithGoogle = () => {\n    return new Promise((resolve, reject) => {\n        signInWithPopup(auth, provider)\n            .then((result) => {\n                console.log(result);\n                const user = result.user;\n                const userData = {\n                    name: user.displayName,\n                    email: user.email,\n                    phone: user.phoneNumber,\n                    profilePic: user.photoURL\n                };\n                localStorage.setItem(\"googleUserData\", JSON.stringify(userData));\n                resolve();\n            }).catch((error) => {\n            console.log(error);\n            reject(error);\n        });\n    });\n};\n\nexport const resetPassword = (email) => {\n    // return app.auth().sendPasswordResetEmail(email)\n    return sendPasswordResetEmail(auth, email)\n        .then(() => {\n            // Password reset email sent successfully\n            console.log(\"Password reset email sent successfully.\");\n        })\n        .catch((error) => {\n            // Handle any errors that occurred during the password reset process\n            console.error(\"Error sending password reset email: \", error);\n        });\n}\n\n\n/* delete account */\nexport const deleteAccount = () => {\n    const auth = getAuth(app);\n    return deleteUser(auth.currentUser)\n        .then(() => {\n            console.log(\"User account deleted successfully\");\n        })\n        .catch((error) => {\n            console.error(\"Error deleting user account: \", error);\n        });\n};\n\n\n/* clear user data from browser localStorage when user signs out */\nexport const clearGoogleUserData = () => {\n    localStorage.removeItem(\"googleUserData\");\n}"],"mappings":"AAAA;AACA,SAASA,aAAa,QAAQ,cAAc;AAC5C,SAASC,OAAO,EAAEC,kBAAkB,EAAEC,eAAe,EAAEC,sBAAsB,EAAEC,UAAU,QAAQ,eAAe;AAChH,OAAO,eAAe;AACtB,SAASC,WAAW,QAAQ,kBAAkB;;AAI9C;AACA;;AAEA;AACA,MAAMC,cAAc,GAAG;EACnBC,MAAM,EAAE,yCAAyC;EACjDC,UAAU,EAAE,mCAAmC;EAC/CC,SAAS,EAAE,oBAAoB;EAC/BC,aAAa,EAAE,+BAA+B;EAC9CC,iBAAiB,EAAE,cAAc;EACjCC,KAAK,EAAE;AACX,CAAC;;AAID;AACA,MAAMC,GAAG,GAAGd,aAAa,CAACO,cAAc,CAAC;AACzC,OAAO,MAAMQ,IAAI,GAAGd,OAAO,CAACa,GAAG,CAAC;AAEhC,MAAME,QAAQ,GAAG,IAAId,kBAAkB,CAAC,CAAC;AAEzC,OAAO,MAAMe,gBAAgB,GAAGA,CAAA,KAAM;EAClC,OAAO,IAAIC,OAAO,CAAC,CAACC,OAAO,EAAEC,MAAM,KAAK;IACpCjB,eAAe,CAACY,IAAI,EAAEC,QAAQ,CAAC,CAC1BK,IAAI,CAAEC,MAAM,IAAK;MACdC,OAAO,CAACC,GAAG,CAACF,MAAM,CAAC;MACnB,MAAMG,IAAI,GAAGH,MAAM,CAACG,IAAI;MACxB,MAAMC,QAAQ,GAAG;QACbC,IAAI,EAAEF,IAAI,CAACG,WAAW;QACtBC,KAAK,EAAEJ,IAAI,CAACI,KAAK;QACjBC,KAAK,EAAEL,IAAI,CAACM,WAAW;QACvBC,UAAU,EAAEP,IAAI,CAACQ;MACrB,CAAC;MACDC,YAAY,CAACC,OAAO,CAAC,gBAAgB,EAAEC,IAAI,CAACC,SAAS,CAACX,QAAQ,CAAC,CAAC;MAChEP,OAAO,CAAC,CAAC;IACb,CAAC,CAAC,CAACmB,KAAK,CAAEC,KAAK,IAAK;MACpBhB,OAAO,CAACC,GAAG,CAACe,KAAK,CAAC;MAClBnB,MAAM,CAACmB,KAAK,CAAC;IACjB,CAAC,CAAC;EACN,CAAC,CAAC;AACN,CAAC;AAED,OAAO,MAAMC,aAAa,GAAIX,KAAK,IAAK;EACpC;EACA,OAAOzB,sBAAsB,CAACW,IAAI,EAAEc,KAAK,CAAC,CACrCR,IAAI,CAAC,MAAM;IACR;IACAE,OAAO,CAACC,GAAG,CAAC,yCAAyC,CAAC;EAC1D,CAAC,CAAC,CACDc,KAAK,CAAEC,KAAK,IAAK;IACd;IACAhB,OAAO,CAACgB,KAAK,CAAC,sCAAsC,EAAEA,KAAK,CAAC;EAChE,CAAC,CAAC;AACV,CAAC;;AAGD;AACA,OAAO,MAAME,aAAa,GAAGA,CAAA,KAAM;EAC/B,MAAM1B,IAAI,GAAGd,OAAO,CAACa,GAAG,CAAC;EACzB,OAAOT,UAAU,CAACU,IAAI,CAAC2B,WAAW,CAAC,CAC9BrB,IAAI,CAAC,MAAM;IACRE,OAAO,CAACC,GAAG,CAAC,mCAAmC,CAAC;EACpD,CAAC,CAAC,CACDc,KAAK,CAAEC,KAAK,IAAK;IACdhB,OAAO,CAACgB,KAAK,CAAC,+BAA+B,EAAEA,KAAK,CAAC;EACzD,CAAC,CAAC;AACV,CAAC;;AAGD;AACA,OAAO,MAAMI,mBAAmB,GAAGA,CAAA,KAAM;EACrCT,YAAY,CAACU,UAAU,CAAC,gBAAgB,CAAC;AAC7C,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}