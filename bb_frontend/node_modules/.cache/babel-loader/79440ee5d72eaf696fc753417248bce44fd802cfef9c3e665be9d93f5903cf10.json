{"ast":null,"code":"var _jsxFileName = \"/Users/aditi/Desktop/BB_Latest_2.0/BudgetBusters/bb_frontend/src/components/SetMonthlyGoal.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$(),\n  _s3 = $RefreshSig$();\n/* copy and paste from s1_displaying branch */\nimport React, { useState, useEffect } from 'react';\nimport { categories } from '../predefinedCategories';\nimport { auth } from \"../firebase\";\nimport { post, put, get } from \"./ApiClient\";\nimport { all } from \"axios\";\n\n/* landing page of Set Monthly Goal: first page of the Set Monthly Goal form OR a display of the user's previously-inputted goal */\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nfunction SetMonthlyGoal() {\n  _s();\n  console.log(\"SetMonthlyGoal component is rendering.\");\n  /* userEmail is used to as an identifier for if data already exists for a particular user */\n  const user = auth.currentUser;\n  const userEmail = user ? user.email : \"\";\n  const [isGoalStored, setIsGoalStored] = useState(Boolean(localStorage.getItem(`colorOptions_${userEmail}`)));\n  const [budgetGoalObj, setBudgetGoalObj] = useState({});\n  const [budgetUpdated, setBudgetUpdated] = useState(false); // to re-fetch budget info whenever update happens\n\n  /* obtaining budget goal object from user input */\n  useEffect(() => {\n    function fetchBudgetData() {\n      let data;\n      try {\n        // Make the GET request to retrieve the budget\n        data = get(`/getBudget/${userEmail}`);\n      } catch (error) {\n        console.error(\"Error creating or fetching budget:\", error);\n      }\n      return data;\n    }\n    fetchBudgetData().then(response => {\n      setBudgetGoalObj(response.data);\n    });\n    setBudgetUpdated(false);\n    console.log(\"budgetGoalObj\", budgetGoalObj);\n  }, [userEmail, budgetUpdated]);\n\n  /* useState variables needed for filling out setMonthlyGoal() information */\n  const [budget, setBudget] = useState('');\n  const [invalidBudgetError, setInvalidBudgetError] = useState('');\n  const [duplicateCategoryError, setDuplicateCategoryError] = useState('');\n  const [selectedCategories, setSelectedCategories] = useState([]);\n  const [newCategory, setNewCategory] = useState('');\n  const [createdCategories, setCreatedCategories] = useState([]);\n  const [displayCreatedCategories, setDisplayCreatedCategories] = useState(false);\n  const [showAllCategories, setShowAllCategories] = useState(false);\n  const [formSubmitted, setFormSubmitted] = useState(false);\n  const [allCategories, setAllCategories] = useState([]);\n\n  /* colorOptions is used to remember the colors that the user selected for all their categories\n   * passed as a parameter for ColorCodeCategories() and DisplayMonthlyGoal() functions          */\n  const [colorOptions, setColorOptions] = useState(() => {\n    const storedColorOptions = localStorage.getItem(`colorOptions_${userEmail}`);\n    return storedColorOptions ? JSON.parse(storedColorOptions) : {};\n  });\n\n  /* function handling non-numeric values in budget goal field */\n  const handleBudgetChange = event => {\n    const inputBudget = event.target.value;\n    const numericRegex = /^[0-9]*$/;\n    if (numericRegex.test(inputBudget)) {\n      setBudget(inputBudget);\n      setInvalidBudgetError('');\n    } else {\n      setBudget(inputBudget);\n      setInvalidBudgetError('Invalid budget goal. Please provide a numerical input.');\n    }\n  };\n\n  /* function handling user's ability to select multiple categories */\n  const handleCategoryClick = category => {\n    if (selectedCategories.includes(category)) {\n      setSelectedCategories(selectedCategories.filter(c => c !== category));\n      setAllCategories(allCategories.filter(c => c !== category));\n    } else {\n      setSelectedCategories([...selectedCategories, category]);\n      setAllCategories([...allCategories, category]);\n    }\n  };\n\n  /* function handling user's ability to create new categories */\n  const handleCreateCategory = () => {\n    if (newCategory.trim() !== '') {\n      const newCategoryLowercase = newCategory.toLowerCase();\n      if (categories.some(category => category.toLowerCase() === newCategoryLowercase) || createdCategories.some(category => category.toLowerCase() === newCategoryLowercase)) {\n        setDuplicateCategoryError('This category name already exists. Please create another name.');\n      } else {\n        const updatedCategories = [...createdCategories, newCategory];\n        setCreatedCategories(updatedCategories);\n        setAllCategories([...allCategories, newCategory]);\n        setNewCategory('');\n        setDuplicateCategoryError('');\n      }\n    }\n  };\n\n  /* function handling user's ability to delete their created categories */\n  const handleRemoveCategory = categoryToRemove => {\n    const updatedCategories = createdCategories.filter(c => c !== categoryToRemove);\n    setCreatedCategories(updatedCategories);\n    setAllCategories(allCategories.filter(c => c !== categoryToRemove));\n  };\n\n  /* function handling the next button (after user enters their budget & categories) */\n  const handleNext = async () => {\n    setFormSubmitted(true);\n    setShowAllCategories(true);\n\n    // abstracted json object to send data to backend (Next button)\n    const goalInfo = {\n      email: userEmail,\n      monthlyBudget: budget,\n      allCategories: allCategories,\n      colors: null\n    };\n    const createBudgetResponse = await post('/createBudget', goalInfo);\n    setBudgetUpdated(true);\n  };\n\n  /* return statement depending on whether user inputted their goal beforehand */\n  if (isGoalStored) {\n    return /*#__PURE__*/_jsxDEV(DisplayMonthlyGoal, {\n      budgetGoalObj: budgetGoalObj,\n      userEmail: userEmail,\n      setBudgetUpdated: setBudgetUpdated\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 127,\n      columnNumber: 13\n    }, this);\n  } else {\n    return formSubmitted ? /*#__PURE__*/_jsxDEV(ColorCodeCategories, {\n      budgetGoalObj: budgetGoalObj,\n      userEmail: userEmail,\n      setBudgetUpdated: setBudgetUpdated,\n      colorOptions: colorOptions,\n      setColorOptions: setColorOptions\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 136,\n      columnNumber: 21\n    }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"Set Monthly Budget:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 145,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"input-container\",\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          className: \"user-input-field\",\n          type: \"text\",\n          placeholder: \"Enter your budget\",\n          value: budget,\n          onChange: handleBudgetChange\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 147,\n          columnNumber: 25\n        }, this), invalidBudgetError && /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"error-message\",\n          children: invalidBudgetError\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 153,\n          columnNumber: 48\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 146,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"h4\", {\n        children: \"Select Categories:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 156,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"category-buttons\",\n        children: categories.map(category => /*#__PURE__*/_jsxDEV(\"button\", {\n          className: `category-button${selectedCategories.includes(category) ? ' selected' : ''}`,\n          onClick: () => handleCategoryClick(category),\n          children: category\n        }, category, false, {\n          fileName: _jsxFileName,\n          lineNumber: 159,\n          columnNumber: 29\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 157,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"add-user-input\",\n        children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n          children: \"Create Categories:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 170,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"plus-button\",\n          onClick: () => setDisplayCreatedCategories(!displayCreatedCategories),\n          children: \"+\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 171,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 169,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"add-field\",\n        children: displayCreatedCategories && /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"input\", {\n            className: \"category-field\",\n            type: \"text\",\n            placeholder: \"Enter a new category\",\n            value: newCategory,\n            onChange: e => setNewCategory(e.target.value)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 179,\n            columnNumber: 33\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"add-button\",\n            onClick: handleCreateCategory,\n            children: \"Add\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 185,\n            columnNumber: 33\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 178,\n          columnNumber: 29\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 176,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"category-buttons\",\n        children: createdCategories.map(category => /*#__PURE__*/_jsxDEV(\"button\", {\n          className: `created-category ${category}`,\n          onClick: () => handleRemoveCategory(category),\n          children: category\n        }, category, false, {\n          fileName: _jsxFileName,\n          lineNumber: 192,\n          columnNumber: 29\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 190,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"submit-button\",\n        type: \"submit\",\n        onClick: handleNext,\n        disabled: invalidBudgetError !== '',\n        children: \"Next\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 201,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 144,\n      columnNumber: 17\n    }, this);\n  }\n}\n\n/* second page of the Set Monthly Goal form (where the users color-code their categories) */\n_s(SetMonthlyGoal, \"9k/8uiQd4jjdRfFHAjzuZd7X8l8=\");\n_c = SetMonthlyGoal;\nfunction ColorCodeCategories({\n  budgetGoalObj,\n  userEmail,\n  setBudgetUpdated,\n  colorOptions,\n  setColorOptions\n}) {\n  _s2();\n  const [submitted, setSubmitted] = useState(false);\n  const [colorCodeError, setColorCodeError] = useState('');\n  const allCategories = budgetGoalObj === null || budgetGoalObj === void 0 ? void 0 : budgetGoalObj.allCategories;\n  const hexColorOptions = {\n    Red: '#ff5c70',\n    Orange: '#ffb267',\n    Yellow: '#e9fc87',\n    Green: '#85d67a',\n    Teal: '#47c8a6',\n    Blue: '#5c9dc5',\n    Violet: '#6d5eb0',\n    Purple: '#af7abd',\n    Pink: '#e36498',\n    Grey: '#ccc'\n  };\n\n  /* function handling the color change of categories when hex code is specified */\n  const handleColorChange = (category, color) => {\n    setColorOptions(prevColorOptions => ({\n      ...prevColorOptions,\n      [category]: color\n    }));\n  };\n\n  /* function handling the submit button (after the user color codes their categories) */\n  const handleSubmit = async () => {\n    const allCategoriesColored = allCategories === null || allCategories === void 0 ? void 0 : allCategories.every(category => colorOptions[category]);\n    if (allCategoriesColored) {\n      setColorCodeError('');\n      setSubmitted(true);\n\n      // collect colors in the order of selectedCategories\n      const selectedColors = allCategories === null || allCategories === void 0 ? void 0 : allCategories.map(category => colorOptions[category]);\n\n      // abstracted json object to send data to backend (Submit button)\n      const colorInfo = {\n        email: userEmail,\n        selectedCategories: allCategories,\n        colors: selectedColors\n      };\n      console.log(colorInfo);\n      const updateBudgetResponse = await put('/updateBudgetColors', colorInfo);\n      setBudgetUpdated(true);\n      console.log(updateBudgetResponse);\n      localStorage.setItem(`colorOptions_${userEmail}`, JSON.stringify(colorOptions));\n    } else {\n      setColorCodeError('Please enter a color for every category.');\n    }\n    window.alert(\"This month's budget and spending categories have been created!\");\n  };\n\n  // no need for get request here for the colors; colors are stored in localStorage in react\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: submitted ? /*#__PURE__*/_jsxDEV(DisplayMonthlyGoal, {\n      budgetGoalObj: budgetGoalObj,\n      userEmail: userEmail,\n      setBudgetUpdated: setBudgetUpdated\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 276,\n      columnNumber: 17\n    }, this) : /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"Color Code Categories:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 283,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n        children: allCategories === null || allCategories === void 0 ? void 0 : allCategories.map(category => /*#__PURE__*/_jsxDEV(\"li\", {\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            children: [/*#__PURE__*/_jsxDEV(\"button\", {\n              className: \"category-button\",\n              id: `button-${category}`,\n              style: {\n                backgroundColor: colorOptions[category] || '#ccc'\n              },\n              children: category\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 288,\n              columnNumber: 37\n            }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n              onChange: e => handleColorChange(category, e.target.value),\n              value: colorOptions[category] || '',\n              children: [/*#__PURE__*/_jsxDEV(\"option\", {\n                value: \"\",\n                children: \"Choose Color\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 295,\n                columnNumber: 41\n              }, this), Object.entries(hexColorOptions).map(([colorName, hexCode]) => /*#__PURE__*/_jsxDEV(\"option\", {\n                value: hexCode,\n                children: colorName\n              }, hexCode, false, {\n                fileName: _jsxFileName,\n                lineNumber: 297,\n                columnNumber: 45\n              }, this))]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 291,\n              columnNumber: 37\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 287,\n            columnNumber: 33\n          }, this)\n        }, category, false, {\n          fileName: _jsxFileName,\n          lineNumber: 286,\n          columnNumber: 29\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 284,\n        columnNumber: 21\n      }, this), colorCodeError && /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"error-message4\",\n        children: colorCodeError\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 306,\n        columnNumber: 40\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"submit-button\",\n        type: \"submit\",\n        onClick: handleSubmit,\n        children: \"Submit\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 307,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 274,\n    columnNumber: 9\n  }, this);\n}\n\n/* Display page: rendered after user completes the form AND as a landing page after the user previously inputted their goal */\n_s2(ColorCodeCategories, \"rSe5sSIf5fDB0J+BGsiqMAY/ULY=\");\n_c2 = ColorCodeCategories;\nfunction DisplayMonthlyGoal({\n  budgetGoalObj,\n  userEmail,\n  setBudgetUpdated\n}) {\n  _s3();\n  const [editableCategories, setEditableCategories] = useState([]);\n  const [duplicateCategoryError2, setDuplicateCategoryError2] = useState('');\n  const allCategories = (budgetGoalObj === null || budgetGoalObj === void 0 ? void 0 : budgetGoalObj.allCategories) || [];\n\n  /* obtains the list of modified categories from local storage if it exists and sets equal to categoryNames */\n  const storedModifiedCategories = localStorage.getItem(`modifiedCategories_${userEmail}`);\n  const modifiedCategories = storedModifiedCategories ? JSON.parse(storedModifiedCategories) : {};\n  const [categoryNames, setCategoryNames] = useState(modifiedCategories);\n  const categoryIndexMap = {};\n  for (let index = 0; index < (allCategories === null || allCategories === void 0 ? void 0 : allCategories.length); index++) {\n    const category = allCategories[index];\n    categoryIndexMap[category] = index;\n  }\n\n  /* function handling the category editing (ensures that only one category is edited in edit mode) */\n  const handleEditCategory = category => {\n    setEditableCategories(prevEditableCategories => {\n      if (prevEditableCategories.includes(category)) {\n        return prevEditableCategories.filter(item => item !== category);\n      } else {\n        return [...prevEditableCategories, category];\n      }\n    });\n  };\n\n  /* function to save modified category name */\n  const handleSaveCategoryName = async category => {\n    // put error handling here\n    const modifiedCategoryName = categoryNames[category] || ''; // Get the modified category name.\n\n    // check if the modified category exists in the list of user categories\n    if (Object.values(categoryNames).filter(name => name === modifiedCategoryName).length > 1) {\n      setDuplicateCategoryError2('This category name already exists. Please enter a new name.');\n    } else {\n      setCategoryNames(prevCategoryNames => ({\n        ...prevCategoryNames,\n        [category]: categoryNames[category]\n      }));\n      setEditableCategories(prevEditableCategories => prevEditableCategories.filter(item => item !== category));\n      setDuplicateCategoryError2(''); // Clear any previous error message.\n    }\n\n    // creates a full list of category names (whether they have been modified or not)\n    const categoriesAfterEdit = allCategories.reduce((list, category) => {\n      list.push(categoryNames[category] || category);\n      return list;\n    }, []);\n    localStorage.setItem(`modifiedCategories_${userEmail}`, JSON.stringify(categoriesAfterEdit));\n\n    // abstracted json object to send data to backend (Save button)\n    const modifiedCategoryInfo = {\n      email: userEmail,\n      allCategories: categoriesAfterEdit\n    };\n    console.log(modifiedCategoryInfo);\n    const updateBudgetResponse = await put('/updateBudgetCategories', modifiedCategoryInfo);\n    setBudgetUpdated(true);\n    console.log(updateBudgetResponse);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h8\", {\n      children: [\"Your Budget for this Month is  $\", budgetGoalObj.monthlyBudget]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 387,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"h9\", {\n      children: \"Your Spending Categories are: \"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 388,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n      children: allCategories === null || allCategories === void 0 ? void 0 : allCategories.map(category => /*#__PURE__*/_jsxDEV(\"li\", {\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"category-button\",\n            id: `button-${category}`,\n            style: {\n              backgroundColor: budgetGoalObj.colors && budgetGoalObj.colors[categoryIndexMap[category]] || '#ccc'\n            },\n            children: editableCategories.includes(category) ? /*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"text\",\n              value: categoryNames[category] || '',\n              onChange: e => setCategoryNames({\n                ...categoryNames,\n                [category]: e.target.value\n              })\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 397,\n              columnNumber: 37\n            }, this) : categoryNames[category] || category\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 393,\n            columnNumber: 29\n          }, this), !editableCategories.includes(category) ? /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"edit-button\",\n            onClick: () => handleEditCategory(category),\n            children: \"Edit\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 410,\n            columnNumber: 33\n          }, this) : null, editableCategories.includes(category) ? /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"edit-button\",\n            onClick: () => handleSaveCategoryName(category),\n            children: \"Save\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 415,\n            columnNumber: 33\n          }, this) : null, duplicateCategoryError2 && /*#__PURE__*/_jsxDEV(\"p\", {\n            className: \"error-message5\",\n            children: duplicateCategoryError2\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 421,\n            columnNumber: 57\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 392,\n          columnNumber: 25\n        }, this)\n      }, category, false, {\n        fileName: _jsxFileName,\n        lineNumber: 391,\n        columnNumber: 21\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 389,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 386,\n    columnNumber: 9\n  }, this);\n}\n_s3(DisplayMonthlyGoal, \"0m1rxwxwlkG5AtS58McTt4jGahg=\");\n_c3 = DisplayMonthlyGoal;\nexport default SetMonthlyGoal;\nvar _c, _c2, _c3;\n$RefreshReg$(_c, \"SetMonthlyGoal\");\n$RefreshReg$(_c2, \"ColorCodeCategories\");\n$RefreshReg$(_c3, \"DisplayMonthlyGoal\");","map":{"version":3,"names":["React","useState","useEffect","categories","auth","post","put","get","all","jsxDEV","_jsxDEV","Fragment","_Fragment","SetMonthlyGoal","_s","console","log","user","currentUser","userEmail","email","isGoalStored","setIsGoalStored","Boolean","localStorage","getItem","budgetGoalObj","setBudgetGoalObj","budgetUpdated","setBudgetUpdated","fetchBudgetData","data","error","then","response","budget","setBudget","invalidBudgetError","setInvalidBudgetError","duplicateCategoryError","setDuplicateCategoryError","selectedCategories","setSelectedCategories","newCategory","setNewCategory","createdCategories","setCreatedCategories","displayCreatedCategories","setDisplayCreatedCategories","showAllCategories","setShowAllCategories","formSubmitted","setFormSubmitted","allCategories","setAllCategories","colorOptions","setColorOptions","storedColorOptions","JSON","parse","handleBudgetChange","event","inputBudget","target","value","numericRegex","test","handleCategoryClick","category","includes","filter","c","handleCreateCategory","trim","newCategoryLowercase","toLowerCase","some","updatedCategories","handleRemoveCategory","categoryToRemove","handleNext","goalInfo","monthlyBudget","colors","createBudgetResponse","DisplayMonthlyGoal","fileName","_jsxFileName","lineNumber","columnNumber","ColorCodeCategories","children","className","type","placeholder","onChange","map","onClick","e","disabled","_c","_s2","submitted","setSubmitted","colorCodeError","setColorCodeError","hexColorOptions","Red","Orange","Yellow","Green","Teal","Blue","Violet","Purple","Pink","Grey","handleColorChange","color","prevColorOptions","handleSubmit","allCategoriesColored","every","selectedColors","colorInfo","updateBudgetResponse","setItem","stringify","window","alert","id","style","backgroundColor","Object","entries","colorName","hexCode","_c2","_s3","editableCategories","setEditableCategories","duplicateCategoryError2","setDuplicateCategoryError2","storedModifiedCategories","modifiedCategories","categoryNames","setCategoryNames","categoryIndexMap","index","length","handleEditCategory","prevEditableCategories","item","handleSaveCategoryName","modifiedCategoryName","values","name","prevCategoryNames","categoriesAfterEdit","reduce","list","push","modifiedCategoryInfo","_c3","$RefreshReg$"],"sources":["/Users/aditi/Desktop/BB_Latest_2.0/BudgetBusters/bb_frontend/src/components/SetMonthlyGoal.js"],"sourcesContent":["/* copy and paste from s1_displaying branch */\nimport React, { useState, useEffect } from 'react';\nimport { categories } from '../predefinedCategories'\nimport { auth } from \"../firebase\";\nimport {post, put, get} from \"./ApiClient\";\nimport {all} from \"axios\";\n\n/* landing page of Set Monthly Goal: first page of the Set Monthly Goal form OR a display of the user's previously-inputted goal */\nfunction SetMonthlyGoal() {\n    console.log(\"SetMonthlyGoal component is rendering.\")\n    /* userEmail is used to as an identifier for if data already exists for a particular user */\n    const user = auth.currentUser;\n    const userEmail = user ? user.email : \"\";\n    const [isGoalStored, setIsGoalStored] = useState(Boolean(localStorage.getItem(`colorOptions_${userEmail}`)));\n    const [budgetGoalObj, setBudgetGoalObj] = useState({});\n    const [budgetUpdated, setBudgetUpdated] = useState(false); // to re-fetch budget info whenever update happens\n\n    /* obtaining budget goal object from user input */\n    useEffect(() => {\n        function fetchBudgetData() {\n            let data;\n            try {\n                // Make the GET request to retrieve the budget\n                data = get(`/getBudget/${userEmail}`)\n            } catch (error) {\n                console.error(\"Error creating or fetching budget:\", error);\n            }\n            return data;\n        }\n\n        fetchBudgetData().then((response) => {\n            setBudgetGoalObj(response.data);\n        });\n        setBudgetUpdated(false)\n        console.log(\"budgetGoalObj\", budgetGoalObj)\n\n    }, [userEmail, budgetUpdated]);\n\n    /* useState variables needed for filling out setMonthlyGoal() information */\n    const [budget, setBudget] = useState('');\n    const [invalidBudgetError, setInvalidBudgetError] = useState('');\n    const [duplicateCategoryError, setDuplicateCategoryError] = useState('');\n    const [selectedCategories, setSelectedCategories] = useState([]);\n    const [newCategory, setNewCategory] = useState('');\n    const [createdCategories, setCreatedCategories] = useState([]);\n    const [displayCreatedCategories, setDisplayCreatedCategories] = useState(false);\n    const [showAllCategories, setShowAllCategories] = useState(false);\n    const [formSubmitted, setFormSubmitted] = useState(false);\n    const [allCategories, setAllCategories] = useState([]);\n\n    /* colorOptions is used to remember the colors that the user selected for all their categories\n     * passed as a parameter for ColorCodeCategories() and DisplayMonthlyGoal() functions          */\n    const [colorOptions, setColorOptions] = useState(() => {\n        const storedColorOptions = localStorage.getItem(`colorOptions_${userEmail}`);\n        return storedColorOptions ? JSON.parse(storedColorOptions) : {};\n    });\n\n    /* function handling non-numeric values in budget goal field */\n    const handleBudgetChange = (event) => {\n        const inputBudget = event.target.value;\n        const numericRegex = /^[0-9]*$/;\n\n        if (numericRegex.test(inputBudget)) {\n            setBudget(inputBudget);\n            setInvalidBudgetError('');\n        } else {\n            setBudget(inputBudget);\n            setInvalidBudgetError('Invalid budget goal. Please provide a numerical input.');\n        }\n    };\n\n    /* function handling user's ability to select multiple categories */\n    const handleCategoryClick = (category) => {\n        if (selectedCategories.includes(category)) {\n            setSelectedCategories(selectedCategories.filter((c) => c !== category));\n            setAllCategories(allCategories.filter((c) => c !== category));\n        } else {\n            setSelectedCategories([...selectedCategories, category]);\n            setAllCategories([...allCategories, category]);\n        }\n    };\n\n    /* function handling user's ability to create new categories */\n    const handleCreateCategory = () => {\n        if (newCategory.trim() !== '') {\n            const newCategoryLowercase = newCategory.toLowerCase();\n\n            if (categories.some(category => category.toLowerCase() === newCategoryLowercase) ||\n                createdCategories.some(category => category.toLowerCase() === newCategoryLowercase)) {\n                setDuplicateCategoryError('This category name already exists. Please create another name.');\n            } else {\n                const updatedCategories = [...createdCategories, newCategory];\n                setCreatedCategories(updatedCategories);\n                setAllCategories([...allCategories, newCategory]);\n                setNewCategory('');\n                setDuplicateCategoryError('');\n            }\n        }\n    };\n\n    /* function handling user's ability to delete their created categories */\n    const handleRemoveCategory = (categoryToRemove) => {\n        const updatedCategories = createdCategories.filter((c) => c !== categoryToRemove);\n        setCreatedCategories(updatedCategories);\n        setAllCategories(allCategories.filter((c) => c !== categoryToRemove));\n    };\n\n    /* function handling the next button (after user enters their budget & categories) */\n    const handleNext = async () => {\n        setFormSubmitted(true);\n        setShowAllCategories(true);\n\n        // abstracted json object to send data to backend (Next button)\n        const goalInfo = {\n            email: userEmail,\n            monthlyBudget: budget,\n            allCategories: allCategories,\n            colors: null\n        }\n        const createBudgetResponse = await post('/createBudget', goalInfo);\n        setBudgetUpdated(true)\n    };\n\n    /* return statement depending on whether user inputted their goal beforehand */\n    if (isGoalStored) {\n        return (\n            <DisplayMonthlyGoal\n                budgetGoalObj={budgetGoalObj}\n                userEmail={userEmail}\n                setBudgetUpdated={setBudgetUpdated}\n            />\n        );\n    } else {\n        return (\n            formSubmitted ? (\n                    <ColorCodeCategories\n                        budgetGoalObj={budgetGoalObj}\n                        userEmail={userEmail}\n                        setBudgetUpdated={setBudgetUpdated}\n                        colorOptions={colorOptions}\n                        setColorOptions={setColorOptions}\n                    />\n                ) :\n                <div>\n                    <h3>Set Monthly Budget:</h3>\n                    <div className=\"input-container\">\n                        <input className='user-input-field'\n                               type=\"text\"\n                               placeholder=\"Enter your budget\"\n                               value={budget}\n                               onChange={handleBudgetChange}\n                        />\n                        {invalidBudgetError && <p className=\"error-message\">{invalidBudgetError}</p>}\n                    </div>\n\n                    <h4>Select Categories:</h4>\n                    <div className=\"category-buttons\">\n                        {categories.map((category) => (\n                            <button\n                                key={category}\n                                className={`category-button${selectedCategories.includes(category) ? ' selected' : ''}`}\n                                onClick={() => handleCategoryClick(category)}\n                            >\n                                {category}\n                            </button>\n                        ))}\n                    </div>\n\n                    <div className=\"add-user-input\">\n                        <h4>Create Categories:</h4>\n                        <button className=\"plus-button\"\n                                onClick={() => setDisplayCreatedCategories(!displayCreatedCategories)}>+\n                        </button>\n                    </div>\n\n                    <div className=\"add-field\">\n                        {displayCreatedCategories && (\n                            <div>\n                                <input className='category-field'\n                                       type=\"text\"\n                                       placeholder=\"Enter a new category\"\n                                       value={newCategory}\n                                       onChange={(e) => setNewCategory(e.target.value)}\n                                />\n                                <button className='add-button' onClick={handleCreateCategory}>Add</button>\n                            </div>\n                        )}\n                    </div>\n\n                    <div className=\"category-buttons\">\n                        {createdCategories.map((category) => (\n                            <button\n                                key={category}\n                                className={`created-category ${category}`}\n                                onClick={() => handleRemoveCategory(category)}>\n                                {category}\n                            </button>\n                        ))}\n                    </div>\n\n                    <button\n                        className=\"submit-button\"\n                        type=\"submit\"\n                        onClick={handleNext}\n                        disabled={invalidBudgetError !== ''}>\n                        Next\n                    </button>\n                </div>\n        )\n    }\n}\n\n/* second page of the Set Monthly Goal form (where the users color-code their categories) */\nfunction ColorCodeCategories({ budgetGoalObj, userEmail, setBudgetUpdated, colorOptions, setColorOptions}) {\n    const [submitted, setSubmitted] = useState(false);\n    const [colorCodeError, setColorCodeError] = useState('');\n    const allCategories = budgetGoalObj?.allCategories;\n\n    const hexColorOptions = {\n        Red: '#ff5c70',\n        Orange: '#ffb267',\n        Yellow: '#e9fc87',\n        Green: '#85d67a',\n        Teal: '#47c8a6',\n        Blue: '#5c9dc5',\n        Violet: '#6d5eb0',\n        Purple: '#af7abd',\n        Pink: '#e36498',\n        Grey: '#ccc'\n    };\n\n    /* function handling the color change of categories when hex code is specified */\n    const handleColorChange = (category, color) => {\n        setColorOptions((prevColorOptions) => ({\n            ...prevColorOptions,\n            [category]: color,\n        }));\n    };\n\n    /* function handling the submit button (after the user color codes their categories) */\n    const handleSubmit = async () => {\n        const allCategoriesColored = allCategories?.every(\n            (category) => colorOptions[category]\n        );\n\n        if (allCategoriesColored) {\n            setColorCodeError('');\n            setSubmitted(true);\n\n            // collect colors in the order of selectedCategories\n            const selectedColors = allCategories?.map((category) => colorOptions[category]);\n\n            // abstracted json object to send data to backend (Submit button)\n            const colorInfo = {\n                email: userEmail,\n                selectedCategories: allCategories,\n                colors: selectedColors\n            }\n\n            console.log(colorInfo);\n            const updateBudgetResponse = await put('/updateBudgetColors', colorInfo);\n            setBudgetUpdated(true);\n            console.log(updateBudgetResponse);\n\n            localStorage.setItem(`colorOptions_${userEmail}`, JSON.stringify(colorOptions));\n        } else {\n            setColorCodeError('Please enter a color for every category.');\n        }\n        window.alert(\"This month's budget and spending categories have been created!\");\n    };\n\n    // no need for get request here for the colors; colors are stored in localStorage in react\n    return (\n        <div>\n            {submitted ? (\n                <DisplayMonthlyGoal\n                    budgetGoalObj={budgetGoalObj}\n                    userEmail={userEmail}\n                    setBudgetUpdated={setBudgetUpdated}\n                />\n            ) : (\n                <>\n                    <h3>Color Code Categories:</h3>\n                    <ul>\n                        {allCategories?.map((category) => (\n                            <li key={category}>\n                                <div>\n                                    <button className=\"category-button\" id={`button-${category}`} style={{ backgroundColor: colorOptions[category] || '#ccc' }}>\n                                        {category}\n                                    </button>\n                                    <select\n                                        onChange={(e) => handleColorChange(category, e.target.value)}\n                                        value={colorOptions[category] || ''}\n                                    >\n                                        <option value=\"\">Choose Color</option>\n                                        {Object.entries(hexColorOptions).map(([colorName, hexCode]) => (\n                                            <option key={hexCode} value={hexCode}>\n                                                {colorName}\n                                            </option>\n                                        ))}\n                                    </select>\n                                </div>\n                            </li>\n                        ))}\n                    </ul>\n                    {colorCodeError && <p className=\"error-message4\">{colorCodeError}</p>}\n                    <button\n                        className=\"submit-button\"\n                        type=\"submit\"\n                        onClick={handleSubmit}>\n                        Submit\n                    </button>\n                </>\n            )}\n        </div>\n    );\n}\n\n/* Display page: rendered after user completes the form AND as a landing page after the user previously inputted their goal */\nfunction DisplayMonthlyGoal({ budgetGoalObj, userEmail, setBudgetUpdated }) {\n    const [editableCategories, setEditableCategories] = useState([]);\n    const [duplicateCategoryError2, setDuplicateCategoryError2] = useState('');\n    const allCategories = budgetGoalObj?.allCategories || [];\n\n    /* obtains the list of modified categories from local storage if it exists and sets equal to categoryNames */\n    const storedModifiedCategories = localStorage.getItem(`modifiedCategories_${userEmail}`);\n    const modifiedCategories = storedModifiedCategories\n        ? JSON.parse(storedModifiedCategories)\n        : {};\n    const [categoryNames, setCategoryNames] = useState(modifiedCategories);\n    const categoryIndexMap = {};\n    for (let index = 0; index < allCategories?.length; index++) {\n        const category = allCategories[index];\n        categoryIndexMap[category] = index;\n    }\n\n    /* function handling the category editing (ensures that only one category is edited in edit mode) */\n    const handleEditCategory = (category) => {\n        setEditableCategories((prevEditableCategories) => {\n            if (prevEditableCategories.includes(category)) {\n                return prevEditableCategories.filter((item) => item !== category);\n            } else {\n                return [...prevEditableCategories, category];\n            }\n        });\n    };\n\n    /* function to save modified category name */\n    const handleSaveCategoryName = async (category) => {\n        // put error handling here\n        const modifiedCategoryName = categoryNames[category] || ''; // Get the modified category name.\n\n        // check if the modified category exists in the list of user categories\n        if (Object.values(categoryNames).filter(name => name === modifiedCategoryName).length > 1) {\n            setDuplicateCategoryError2('This category name already exists. Please enter a new name.');\n        } else {\n            setCategoryNames((prevCategoryNames) => ({\n                ...prevCategoryNames,\n                [category]: categoryNames[category],\n            }));\n            setEditableCategories((prevEditableCategories) => prevEditableCategories.filter((item) => item !== category));\n            setDuplicateCategoryError2(''); // Clear any previous error message.\n        }\n\n        // creates a full list of category names (whether they have been modified or not)\n        const categoriesAfterEdit = allCategories.reduce((list, category) => {\n            list.push(categoryNames[category] || category);\n            return list;\n        }, []);\n\n        localStorage.setItem(`modifiedCategories_${userEmail}`, JSON.stringify(categoriesAfterEdit));\n\n        // abstracted json object to send data to backend (Save button)\n        const modifiedCategoryInfo = {\n            email: userEmail,\n            allCategories: categoriesAfterEdit\n        }\n\n        console.log(modifiedCategoryInfo);\n        const updateBudgetResponse = await put('/updateBudgetCategories', modifiedCategoryInfo);\n        setBudgetUpdated(true);\n        console.log(updateBudgetResponse);\n    };\n\n    return (\n        <div>\n            <h8>Your Budget for this Month is  ${budgetGoalObj.monthlyBudget}</h8>\n            <h9>Your Spending Categories are: </h9>\n            <ul>\n                {allCategories?.map((category) => (\n                    <li key={category}>\n                        <div>\n                            <button className=\"category-button\" id={`button-${category}`}\n                                style={{backgroundColor: (budgetGoalObj.colors && (budgetGoalObj.colors)[categoryIndexMap[category]]) || '#ccc'}}>\n\n                                {editableCategories.includes(category) ? (\n                                    <input\n                                        type=\"text\"\n                                        value={categoryNames[category] || ''}\n                                        onChange={(e) => setCategoryNames({\n                                            ...categoryNames,\n                                            [category]: e.target.value\n                                        })}\n                                    />\n                                ) : (\n                                    categoryNames[category] || category\n                                )}\n                            </button>\n                            {!editableCategories.includes(category) ? (\n                                <button className=\"edit-button\" onClick={() => handleEditCategory(category)}>\n                                    Edit\n                                </button>\n                            ) : null}\n                            {editableCategories.includes(category) ? (\n                                <button\n                                    className=\"edit-button\"\n                                    onClick={() => handleSaveCategoryName(category)}>\n                                    Save\n                                </button>\n                            ) : null}\n                            {duplicateCategoryError2 && <p className=\"error-message5\">{duplicateCategoryError2}</p>}\n                        </div>\n                    </li>\n                ))}\n            </ul>\n        </div>\n    );\n}\n\nexport default SetMonthlyGoal;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}